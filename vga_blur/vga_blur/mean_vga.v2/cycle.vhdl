-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.126 Production Release
--  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
-- 
--  Generated by:   oh1015@EEWS104A-004
--  Generated date: Fri Mar 04 16:28:23 2016
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    mean_vga_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.mean_vga_mux_pkg.ALL;


ENTITY mean_vga_core IS
  PORT(
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    vin_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (149 DOWNTO 0);
    vout_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (29 DOWNTO 0)
  );
END mean_vga_core;

ARCHITECTURE v2 OF mean_vga_core IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  core : PROCESS
    -- Interconnect Declarations
    VARIABLE regs_regs_2_sva : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_1_sva : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_3_sva : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_0_sva : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_4_sva : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_0_lpi_2 : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_2_lpi_2 : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_1_lpi_2 : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_3_lpi_2 : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_4_lpi_2 : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE red_1_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE green_1_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE blue_1_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_2_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_1_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_3_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_0_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_4_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_2_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_1_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_3_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_0_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_4_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_2_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_1_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_3_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_0_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_4_sva : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE regs_operator_din_sva : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE unequal_tmp : STD_LOGIC;
    VARIABLE SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva : STD_LOGIC_VECTOR (149
        DOWNTO 0);
    VARIABLE regs_regs_0_lpi_2_dfm : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_1_lpi_2_dfm : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_2_lpi_2_dfm : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_3_lpi_2_dfm : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE regs_regs_4_lpi_2_dfm : STD_LOGIC_VECTOR (149 DOWNTO 0);
    VARIABLE i_4_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE r_0_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_0_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_0_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_1_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_1_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_1_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_2_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_2_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_2_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_3_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_3_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_3_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE r_4_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE g_4_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE b_4_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE i_4_sva_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE i_3_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE red_1_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE green_1_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE blue_1_sva_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE i_3_sva_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE acc_imod_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE acc_imod_2_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE FRAME_acc_3_psp_sva : STD_LOGIC_VECTOR (11 DOWNTO 0);
    VARIABLE acc_imod_4_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE FRAME_acc_4_psp_sva : STD_LOGIC_VECTOR (11 DOWNTO 0);
    VARIABLE SHIFT_acc_1_psp : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE FRAME_acc_25_itm : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE FRAME_acc_42_itm : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE FRAME_acc_2_itm : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE FRAME_acc_28_sdt : STD_LOGIC_VECTOR (3 DOWNTO 0);
    VARIABLE FRAME_acc_45_sdt : STD_LOGIC_VECTOR (3 DOWNTO 0);
    VARIABLE FRAME_acc_55_sdt : STD_LOGIC_VECTOR (3 DOWNTO 0);
    VARIABLE FRAME_acc_59_psp : STD_LOGIC_VECTOR (5 DOWNTO 0);
    VARIABLE FRAME_acc_57_psp : STD_LOGIC_VECTOR (5 DOWNTO 0);
    VARIABLE SHIFT_i_1_sva_2_sg1 : STD_LOGIC;
    VARIABLE SHIFT_i_1_sva_3 : STD_LOGIC_VECTOR (1 DOWNTO 0);

    VARIABLE select_0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE regs_operator_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_1_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_2_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_3_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_4_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_5_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_6_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_7_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_8_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_9_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_10_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_11_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_12_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_13_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE regs_operator_14_mux_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE ACC2_mux_nl : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE ACC2_mux_1_nl : STD_LOGIC_VECTOR (15 DOWNTO 0);
    VARIABLE ACC2_mux_2_nl : STD_LOGIC_VECTOR (15 DOWNTO 0);
  BEGIN
    core_rlp : LOOP
      -- C-Step 0 of Loop 'core_rlp'
      regs_regs_2_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      regs_regs_1_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      regs_regs_3_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      regs_regs_0_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      regs_regs_4_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      main : LOOP
        -- C-Step 0 of Loop 'main'
        regs_regs_4_lpi_2 := regs_regs_4_sva;
        regs_regs_3_lpi_2 := regs_regs_3_sva;
        regs_regs_1_lpi_2 := regs_regs_1_sva;
        regs_regs_2_lpi_2 := regs_regs_2_sva;
        regs_regs_0_lpi_2 := regs_regs_0_sva;
        red_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
        green_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
        blue_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
        b_2_sva := STD_LOGIC_VECTOR'("0000000000000000");
        b_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
        b_3_sva := STD_LOGIC_VECTOR'("0000000000000000");
        b_0_sva := STD_LOGIC_VECTOR'("0000000000000000");
        b_4_sva := STD_LOGIC_VECTOR'("0000000000000000");
        g_2_sva := STD_LOGIC_VECTOR'("0000000000000000");
        g_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
        g_3_sva := STD_LOGIC_VECTOR'("0000000000000000");
        g_0_sva := STD_LOGIC_VECTOR'("0000000000000000");
        g_4_sva := STD_LOGIC_VECTOR'("0000000000000000");
        r_2_sva := STD_LOGIC_VECTOR'("0000000000000000");
        r_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
        r_3_sva := STD_LOGIC_VECTOR'("0000000000000000");
        r_0_sva := STD_LOGIC_VECTOR'("0000000000000000");
        r_4_sva := STD_LOGIC_VECTOR'("0000000000000000");
        SHIFT_i_1_sva_3 := STD_LOGIC_VECTOR'("00");
        SHIFT_i_1_sva_2_sg1 := '1';
        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
            = '0' );
        EXIT core_rlp WHEN ( arst_n = '0' );
        -- C-Step 1 of Loop 'main'
        regs_operator_din_sva := vin_rsc_mgc_in_wire_d;
        SHIFT : LOOP
          -- C-Step 0 of Loop 'SHIFT'
          WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
              = '0' );
          EXIT core_rlp WHEN ( arst_n = '0' );
          -- C-Step 1 of Loop 'SHIFT'
          SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
          unequal_tmp := SHIFT_i_1_sva_2_sg1 OR (SHIFT_i_1_sva_3(1)) OR (SHIFT_i_1_sva_3(0));
          select_0 := TO_STDLOGICVECTOR(SHIFT_i_1_sva_2_sg1) & SHIFT_i_1_sva_3;
          CASE select_0 IS
            WHEN "000" =>
              -- NOP
            WHEN OTHERS =>
              SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva := MUX_v_150_4_2(regs_regs_0_lpi_2
                  & regs_regs_1_lpi_2 & regs_regs_2_lpi_2 & regs_regs_3_lpi_2, STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(SHIFT_i_1_sva_3)
                  + CONV_UNSIGNED(CONV_SIGNED('1', 1), 2), 2)));
          END CASE;
          regs_regs_0_lpi_2_dfm := MUX_v_150_2_2(regs_operator_din_sva & regs_regs_0_lpi_2,
              unequal_tmp);
          regs_regs_1_lpi_2_dfm := MUX_v_150_2_2(regs_regs_1_lpi_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva,
              (NOT (SHIFT_i_1_sva_3(1))) AND (SHIFT_i_1_sva_3(0)) AND unequal_tmp);
          regs_regs_2_lpi_2_dfm := MUX_v_150_2_2(regs_regs_2_lpi_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva,
              (SHIFT_i_1_sva_3(1)) AND (NOT (SHIFT_i_1_sva_3(0))) AND unequal_tmp);
          regs_regs_3_lpi_2_dfm := MUX_v_150_2_2(regs_regs_3_lpi_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva,
              (SHIFT_i_1_sva_3(1)) AND (SHIFT_i_1_sva_3(0)) AND unequal_tmp);
          regs_regs_4_lpi_2_dfm := MUX_v_150_2_2(regs_regs_4_lpi_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva,
              (NOT((SHIFT_i_1_sva_3(1)) OR (SHIFT_i_1_sva_3(0)))) AND unequal_tmp);
          SHIFT_acc_1_psp := STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR(SHIFT_i_1_sva_2_sg1)
              & SHIFT_i_1_sva_3) + CONV_SIGNED(CONV_SIGNED('1', 1), 3), 3));
          EXIT SHIFT WHEN ( (SHIFT_acc_1_psp(2)) = '1' );
          regs_regs_0_lpi_2 := regs_regs_0_lpi_2_dfm;
          regs_regs_1_lpi_2 := regs_regs_1_lpi_2_dfm;
          regs_regs_2_lpi_2 := regs_regs_2_lpi_2_dfm;
          regs_regs_3_lpi_2 := regs_regs_3_lpi_2_dfm;
          regs_regs_4_lpi_2 := regs_regs_4_lpi_2_dfm;
          SHIFT_i_1_sva_3 := SHIFT_acc_1_psp(1 DOWNTO 0);
          SHIFT_i_1_sva_2_sg1 := '0';
        END LOOP SHIFT;

        i_4_sva := STD_LOGIC_VECTOR'("000");
        ACC1 : LOOP
          -- C-Step 0 of Loop 'ACC1'
          WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
              = '0' );
          EXIT core_rlp WHEN ( arst_n = '0' );
          -- C-Step 1 of Loop 'ACC1'
          regs_operator_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(29 DOWNTO 20))
              & (regs_regs_1_lpi_2_dfm(29 DOWNTO 20)) & (regs_regs_2_lpi_2_dfm(29
              DOWNTO 20)) & (regs_regs_3_lpi_2_dfm(29 DOWNTO 20)) & (regs_regs_4_lpi_2_dfm(29
              DOWNTO 20)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          r_0_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(r_0_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_mux_nl),
              16), 16));
          regs_operator_1_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(19 DOWNTO
              10)) & (regs_regs_1_lpi_2_dfm(19 DOWNTO 10)) & (regs_regs_2_lpi_2_dfm(19
              DOWNTO 10)) & (regs_regs_3_lpi_2_dfm(19 DOWNTO 10)) & (regs_regs_4_lpi_2_dfm(19
              DOWNTO 10)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          g_0_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(g_0_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_1_mux_nl),
              16), 16));
          regs_operator_2_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(9 DOWNTO
              0)) & (regs_regs_1_lpi_2_dfm(9 DOWNTO 0)) & (regs_regs_2_lpi_2_dfm(9
              DOWNTO 0)) & (regs_regs_3_lpi_2_dfm(9 DOWNTO 0)) & (regs_regs_4_lpi_2_dfm(9
              DOWNTO 0)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          b_0_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(b_0_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_2_mux_nl),
              16), 16));
          regs_operator_3_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(59 DOWNTO
              50)) & (regs_regs_1_lpi_2_dfm(59 DOWNTO 50)) & (regs_regs_2_lpi_2_dfm(59
              DOWNTO 50)) & (regs_regs_3_lpi_2_dfm(59 DOWNTO 50)) & (regs_regs_4_lpi_2_dfm(59
              DOWNTO 50)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          r_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(r_1_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_3_mux_nl),
              16), 16));
          regs_operator_4_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(49 DOWNTO
              40)) & (regs_regs_1_lpi_2_dfm(49 DOWNTO 40)) & (regs_regs_2_lpi_2_dfm(49
              DOWNTO 40)) & (regs_regs_3_lpi_2_dfm(49 DOWNTO 40)) & (regs_regs_4_lpi_2_dfm(49
              DOWNTO 40)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          g_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(g_1_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_4_mux_nl),
              16), 16));
          regs_operator_5_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(39 DOWNTO
              30)) & (regs_regs_1_lpi_2_dfm(39 DOWNTO 30)) & (regs_regs_2_lpi_2_dfm(39
              DOWNTO 30)) & (regs_regs_3_lpi_2_dfm(39 DOWNTO 30)) & (regs_regs_4_lpi_2_dfm(39
              DOWNTO 30)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          b_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(b_1_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_5_mux_nl),
              16), 16));
          regs_operator_6_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(89 DOWNTO
              80)) & (regs_regs_1_lpi_2_dfm(89 DOWNTO 80)) & (regs_regs_2_lpi_2_dfm(89
              DOWNTO 80)) & (regs_regs_3_lpi_2_dfm(89 DOWNTO 80)) & (regs_regs_4_lpi_2_dfm(89
              DOWNTO 80)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          r_2_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(r_2_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_6_mux_nl),
              16), 16));
          regs_operator_7_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(79 DOWNTO
              70)) & (regs_regs_1_lpi_2_dfm(79 DOWNTO 70)) & (regs_regs_2_lpi_2_dfm(79
              DOWNTO 70)) & (regs_regs_3_lpi_2_dfm(79 DOWNTO 70)) & (regs_regs_4_lpi_2_dfm(79
              DOWNTO 70)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          g_2_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(g_2_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_7_mux_nl),
              16), 16));
          regs_operator_8_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(69 DOWNTO
              60)) & (regs_regs_1_lpi_2_dfm(69 DOWNTO 60)) & (regs_regs_2_lpi_2_dfm(69
              DOWNTO 60)) & (regs_regs_3_lpi_2_dfm(69 DOWNTO 60)) & (regs_regs_4_lpi_2_dfm(69
              DOWNTO 60)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          b_2_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(b_2_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_8_mux_nl),
              16), 16));
          regs_operator_9_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(119 DOWNTO
              110)) & (regs_regs_1_lpi_2_dfm(119 DOWNTO 110)) & (regs_regs_2_lpi_2_dfm(119
              DOWNTO 110)) & (regs_regs_3_lpi_2_dfm(119 DOWNTO 110)) & (regs_regs_4_lpi_2_dfm(119
              DOWNTO 110)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          r_3_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(r_3_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_9_mux_nl),
              16), 16));
          regs_operator_10_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(109 DOWNTO
              100)) & (regs_regs_1_lpi_2_dfm(109 DOWNTO 100)) & (regs_regs_2_lpi_2_dfm(109
              DOWNTO 100)) & (regs_regs_3_lpi_2_dfm(109 DOWNTO 100)) & (regs_regs_4_lpi_2_dfm(109
              DOWNTO 100)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          g_3_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(g_3_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_10_mux_nl),
              16), 16));
          regs_operator_11_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(99 DOWNTO
              90)) & (regs_regs_1_lpi_2_dfm(99 DOWNTO 90)) & (regs_regs_2_lpi_2_dfm(99
              DOWNTO 90)) & (regs_regs_3_lpi_2_dfm(99 DOWNTO 90)) & (regs_regs_4_lpi_2_dfm(99
              DOWNTO 90)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          b_3_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(b_3_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_11_mux_nl),
              16), 16));
          regs_operator_12_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(149 DOWNTO
              140)) & (regs_regs_1_lpi_2_dfm(149 DOWNTO 140)) & (regs_regs_2_lpi_2_dfm(149
              DOWNTO 140)) & (regs_regs_3_lpi_2_dfm(149 DOWNTO 140)) & (regs_regs_4_lpi_2_dfm(149
              DOWNTO 140)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          r_4_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(r_4_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_12_mux_nl),
              16), 16));
          regs_operator_13_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(139 DOWNTO
              130)) & (regs_regs_1_lpi_2_dfm(139 DOWNTO 130)) & (regs_regs_2_lpi_2_dfm(139
              DOWNTO 130)) & (regs_regs_3_lpi_2_dfm(139 DOWNTO 130)) & (regs_regs_4_lpi_2_dfm(139
              DOWNTO 130)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          g_4_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(g_4_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_13_mux_nl),
              16), 16));
          regs_operator_14_mux_nl := MUX_v_10_8_2((regs_regs_0_lpi_2_dfm(129 DOWNTO
              120)) & (regs_regs_1_lpi_2_dfm(129 DOWNTO 120)) & (regs_regs_2_lpi_2_dfm(129
              DOWNTO 120)) & (regs_regs_3_lpi_2_dfm(129 DOWNTO 120)) & (regs_regs_4_lpi_2_dfm(129
              DOWNTO 120)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
              & STD_LOGIC_VECTOR'("0000000000"), i_4_sva);
          b_4_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(b_4_sva) + CONV_UNSIGNED(UNSIGNED(regs_operator_14_mux_nl),
              16), 16));
          i_4_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_4_sva) + CONV_UNSIGNED(CONV_UNSIGNED('1',
              1), 3), 3));
          EXIT ACC1 WHEN ( (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED(i_4_sva_1),
              4) + SIGNED'("1011"), 4)), 3)) = '0' );
          r_0_sva := r_0_sva_1;
          r_1_sva := r_1_sva_1;
          r_2_sva := r_2_sva_1;
          r_3_sva := r_3_sva_1;
          r_4_sva := r_4_sva_1;
          g_0_sva := g_0_sva_1;
          g_1_sva := g_1_sva_1;
          g_2_sva := g_2_sva_1;
          g_3_sva := g_3_sva_1;
          g_4_sva := g_4_sva_1;
          b_0_sva := b_0_sva_1;
          b_1_sva := b_1_sva_1;
          b_2_sva := b_2_sva_1;
          b_3_sva := b_3_sva_1;
          b_4_sva := b_4_sva_1;
          i_4_sva := i_4_sva_1;
        END LOOP ACC1;

        i_3_sva := STD_LOGIC_VECTOR'("000");
        ACC2 : LOOP
          -- C-Step 0 of Loop 'ACC2'
          WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
              = '0' );
          EXIT core_rlp WHEN ( arst_n = '0' );
          -- C-Step 1 of Loop 'ACC2'
          ACC2_mux_nl := MUX_v_16_8_2(r_0_sva_1 & r_1_sva_1 & r_2_sva_1 & r_3_sva_1
              & r_4_sva_1 & STD_LOGIC_VECTOR'("0000000000000000") & STD_LOGIC_VECTOR'("0000000000000000")
              & STD_LOGIC_VECTOR'("0000000000000000"), i_3_sva);
          red_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(red_1_sva) + UNSIGNED(ACC2_mux_nl),
              16));
          ACC2_mux_1_nl := MUX_v_16_8_2(g_0_sva_1 & g_1_sva_1 & g_2_sva_1 & g_3_sva_1
              & g_4_sva_1 & STD_LOGIC_VECTOR'("0000000000000000") & STD_LOGIC_VECTOR'("0000000000000000")
              & STD_LOGIC_VECTOR'("0000000000000000"), i_3_sva);
          green_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(green_1_sva) +
              UNSIGNED(ACC2_mux_1_nl), 16));
          ACC2_mux_2_nl := MUX_v_16_8_2(b_0_sva_1 & b_1_sva_1 & b_2_sva_1 & b_3_sva_1
              & b_4_sva_1 & STD_LOGIC_VECTOR'("0000000000000000") & STD_LOGIC_VECTOR'("0000000000000000")
              & STD_LOGIC_VECTOR'("0000000000000000"), i_3_sva);
          blue_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(blue_1_sva) + UNSIGNED(ACC2_mux_2_nl),
              16));
          i_3_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_3_sva) + CONV_UNSIGNED(CONV_UNSIGNED('1',
              1), 3), 3));
          EXIT ACC2 WHEN ( (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED(i_3_sva_1),
              4) + SIGNED'("1011"), 4)), 3)) = '0' );
          red_1_sva := red_1_sva_1;
          green_1_sva := green_1_sva_1;
          blue_1_sva := blue_1_sva_1;
          i_3_sva := i_3_sva_1;
        END LOOP ACC2;

        regs_regs_0_sva := regs_regs_0_lpi_2_dfm;
        regs_regs_1_sva := regs_regs_1_lpi_2_dfm;
        regs_regs_2_sva := regs_regs_2_lpi_2_dfm;
        regs_regs_3_sva := regs_regs_3_lpi_2_dfm;
        regs_regs_4_sva := regs_regs_4_lpi_2_dfm;
        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
            = '0' );
        EXIT core_rlp WHEN ( arst_n = '0' );
        -- C-Step 2 of Loop 'main'
        acc_imod_sva := STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(UNSIGNED'("10011"),
            6) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT
            (red_1_sva_1(4))) & STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT (red_1_sva_1(4)))),
            5) + CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(red_1_sva_1(5)) & (red_1_sva_1(9
            DOWNTO 7))), 5), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(red_1_sva_1(14))
            & STD_LOGIC_VECTOR'("00") & TO_STDLOGICVECTOR(red_1_sva_1(14))), 5) +
            CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT (red_1_sva_1(15))) & STD_LOGIC_VECTOR'("11")
            & TO_STDLOGICVECTOR(NOT (red_1_sva_1(5)))), 5), 6), 6), 7) + CONV_SIGNED(CONV_SIGNED(SIGNED'((red_1_sva_1(6))
            & '0' & (red_1_sva_1(6)) & '0' & (red_1_sva_1(6))) + CONV_SIGNED(UNSIGNED(red_1_sva_1(3
            DOWNTO 0)), 5), 7) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(NOT (red_1_sva_1(13
            DOWNTO 10))), 5) + CONV_UNSIGNED(UNSIGNED((red_1_sva_1(9 DOWNTO 7)) &
            TO_STDLOGICVECTOR(red_1_sva_1(15))), 5), 7), 7), 7));
        acc_imod_2_sva := STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(UNSIGNED'("10011"),
            6) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT
            (green_1_sva_1(4))) & STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT
            (green_1_sva_1(4)))), 5) + CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(green_1_sva_1(5))
            & (green_1_sva_1(9 DOWNTO 7))), 5), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(green_1_sva_1(14))
            & STD_LOGIC_VECTOR'("00") & TO_STDLOGICVECTOR(green_1_sva_1(14))), 5)
            + CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT (green_1_sva_1(15))) &
            STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT (green_1_sva_1(5)))),
            5), 6), 6), 7) + CONV_SIGNED(CONV_SIGNED(SIGNED'((green_1_sva_1(6)) &
            '0' & (green_1_sva_1(6)) & '0' & (green_1_sva_1(6))) + CONV_SIGNED(UNSIGNED(green_1_sva_1(3
            DOWNTO 0)), 5), 7) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(NOT (green_1_sva_1(13
            DOWNTO 10))), 5) + CONV_UNSIGNED(UNSIGNED((green_1_sva_1(9 DOWNTO 7))
            & TO_STDLOGICVECTOR(green_1_sva_1(15))), 5), 7), 7), 7));
        FRAME_acc_57_psp := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_SIGNED(CONV_SIGNED(green_1_sva_1(15),
            1),5)), 6) + CONV_UNSIGNED(UNSIGNED(CONV_SIGNED(CONV_SIGNED(green_1_sva_1(14),
            1),4)), 6), 6));
        FRAME_acc_28_sdt := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT
            (acc_imod_2_sva(4))) & STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT
            (acc_imod_2_sva(4)))) + CONV_UNSIGNED(SIGNED(NOT (acc_imod_2_sva(6 DOWNTO
            5))), 4), 4));
        FRAME_acc_25_itm := STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(UNSIGNED((green_1_sva_1(9
            DOWNTO 6)) & TO_STDLOGICVECTOR(green_1_sva_1(4))), 7) + CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(green_1_sva_1(6),
            1), 2) + CONV_UNSIGNED(CONV_UNSIGNED(acc_imod_2_sva(4), 1), 2), 3) +
            CONV_SIGNED(SIGNED(acc_imod_2_sva(6 DOWNTO 5)), 3), 7), 7) + CONV_SIGNED(CONV_SIGNED(UNSIGNED(green_1_sva_1(9
            DOWNTO 7)), 5) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED((acc_imod_2_sva(6
            DOWNTO 5)) & STD_LOGIC_VECTOR'("01")), 5) + CONV_UNSIGNED(UNSIGNED(FRAME_acc_28_sdt(3
            DOWNTO 1)), 5), 5)) & TO_STDLOGICVECTOR(FRAME_acc_28_sdt(0))) + CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
            & (acc_imod_2_sva(3 DOWNTO 0))), 6), 6)), 5), 1), 2) + CONV_SIGNED(CONV_UNSIGNED(green_1_sva_1(5),
            1), 2), 5), 7), 7));
        acc_imod_4_sva := STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(UNSIGNED'("10011"),
            6) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT
            (blue_1_sva_1(4))) & STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT
            (blue_1_sva_1(4)))), 5) + CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(blue_1_sva_1(5))
            & (blue_1_sva_1(9 DOWNTO 7))), 5), 6) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(blue_1_sva_1(14))
            & STD_LOGIC_VECTOR'("00") & TO_STDLOGICVECTOR(blue_1_sva_1(14))), 5)
            + CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT (blue_1_sva_1(15))) &
            STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT (blue_1_sva_1(5)))),
            5), 6), 6), 7) + CONV_SIGNED(CONV_SIGNED(SIGNED'((blue_1_sva_1(6)) &
            '0' & (blue_1_sva_1(6)) & '0' & (blue_1_sva_1(6))) + CONV_SIGNED(UNSIGNED(blue_1_sva_1(3
            DOWNTO 0)), 5), 7) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(NOT (blue_1_sva_1(13
            DOWNTO 10))), 5) + CONV_UNSIGNED(UNSIGNED((blue_1_sva_1(9 DOWNTO 7))
            & TO_STDLOGICVECTOR(blue_1_sva_1(15))), 5), 7), 7), 7));
        FRAME_acc_59_psp := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(CONV_SIGNED(CONV_SIGNED(blue_1_sva_1(15),
            1),5)), 6) + CONV_UNSIGNED(UNSIGNED(CONV_SIGNED(CONV_SIGNED(blue_1_sva_1(14),
            1),4)), 6), 6));
        FRAME_acc_45_sdt := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT
            (acc_imod_4_sva(4))) & STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT
            (acc_imod_4_sva(4)))) + CONV_UNSIGNED(SIGNED(NOT (acc_imod_4_sva(6 DOWNTO
            5))), 4), 4));
        FRAME_acc_42_itm := STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(UNSIGNED((blue_1_sva_1(9
            DOWNTO 6)) & TO_STDLOGICVECTOR(blue_1_sva_1(4))), 7) + CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(blue_1_sva_1(6),
            1), 2) + CONV_UNSIGNED(CONV_UNSIGNED(acc_imod_4_sva(4), 1), 2), 3) +
            CONV_SIGNED(SIGNED(acc_imod_4_sva(6 DOWNTO 5)), 3), 7), 7) + CONV_SIGNED(CONV_SIGNED(UNSIGNED(blue_1_sva_1(9
            DOWNTO 7)), 5) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED((acc_imod_4_sva(6
            DOWNTO 5)) & STD_LOGIC_VECTOR'("01")), 5) + CONV_UNSIGNED(UNSIGNED(FRAME_acc_45_sdt(3
            DOWNTO 1)), 5), 5)) & TO_STDLOGICVECTOR(FRAME_acc_45_sdt(0))) + CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
            & (acc_imod_4_sva(3 DOWNTO 0))), 6), 6)), 5), 1), 2) + CONV_SIGNED(CONV_UNSIGNED(blue_1_sva_1(5),
            1), 2), 5), 7), 7));
        FRAME_acc_55_sdt := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(NOT
            (acc_imod_sva(4))) & STD_LOGIC_VECTOR'("11") & TO_STDLOGICVECTOR(NOT
            (acc_imod_sva(4)))) + CONV_UNSIGNED(SIGNED(NOT (acc_imod_sva(6 DOWNTO
            5))), 4), 4));
        FRAME_acc_2_itm := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(red_1_sva_1(14))
            & TO_STDLOGICVECTOR('0') & TO_STDLOGICVECTOR(red_1_sva_1(14)) & STD_LOGIC_VECTOR'("000")
            & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(red_1_sva_1(14), 1),4))) +
            CONV_UNSIGNED(UNSIGNED'(UNSIGNED(red_1_sva_1(13 DOWNTO 10)) * UNSIGNED'("101001")),
            10), 10) + CONV_UNSIGNED(CONV_SIGNED(UNSIGNED(TO_STDLOGICVECTOR(red_1_sva_1(15))
            & STD_LOGIC_VECTOR'("000") & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(red_1_sva_1(15),
            1),5))), 10) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(UNSIGNED((red_1_sva_1(9
            DOWNTO 6)) & TO_STDLOGICVECTOR(red_1_sva_1(4))), 7) + CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(red_1_sva_1(6),
            1), 2) + CONV_UNSIGNED(CONV_UNSIGNED(acc_imod_sva(4), 1), 2), 3) + CONV_SIGNED(SIGNED(acc_imod_sva(6
            DOWNTO 5)), 3), 7), 7) + CONV_SIGNED(CONV_SIGNED(UNSIGNED(red_1_sva_1(9
            DOWNTO 7)), 5) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED((acc_imod_sva(6
            DOWNTO 5)) & STD_LOGIC_VECTOR'("01")), 5) + CONV_UNSIGNED(UNSIGNED(FRAME_acc_55_sdt(3
            DOWNTO 1)), 5), 5)) & TO_STDLOGICVECTOR(FRAME_acc_55_sdt(0))) + CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
            & (acc_imod_sva(3 DOWNTO 0))), 6), 6)), 5), 1), 2) + CONV_SIGNED(CONV_UNSIGNED(red_1_sva_1(5),
            1), 2), 5), 7), 10), 10), 10));
        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
            = '0' );
        EXIT core_rlp WHEN ( arst_n = '0' );
        -- C-Step 3 of Loop 'main'
        FRAME_acc_4_psp_sva := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED((blue_1_sva_1(15
            DOWNTO 14)) & (blue_1_sva_1(15 DOWNTO 14)) & TO_STDLOGICVECTOR('0') &
            FRAME_acc_59_psp), 12) + CONV_UNSIGNED(CONV_SIGNED(UNSIGNED'(UNSIGNED(blue_1_sva_1(13
            DOWNTO 10)) * UNSIGNED'("101001")), 11) + CONV_SIGNED(SIGNED(FRAME_acc_42_itm),
            11), 12), 12));
        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
            = '0' );
        EXIT core_rlp WHEN ( arst_n = '0' );
        -- C-Step 4 of Loop 'main'
        FRAME_acc_3_psp_sva := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED((green_1_sva_1(15
            DOWNTO 14)) & (green_1_sva_1(15 DOWNTO 14)) & TO_STDLOGICVECTOR('0')
            & FRAME_acc_57_psp), 12) + CONV_UNSIGNED(CONV_SIGNED(UNSIGNED'(UNSIGNED(green_1_sva_1(13
            DOWNTO 10)) * UNSIGNED'("101001")), 11) + CONV_SIGNED(SIGNED(FRAME_acc_25_itm),
            11), 12), 12));
        vout_rsc_mgc_out_stdreg_d <= (FRAME_acc_2_itm OR STD_LOGIC_VECTOR(UNSIGNED'("00000000")
            & UNSIGNED(FRAME_acc_3_psp_sva(11 DOWNTO 10)))) & (FRAME_acc_3_psp_sva(9
            DOWNTO 6)) & ((FRAME_acc_3_psp_sva(5 DOWNTO 0)) OR STD_LOGIC_VECTOR(UNSIGNED'("0000")
            & UNSIGNED(FRAME_acc_4_psp_sva(11 DOWNTO 10)))) & (FRAME_acc_4_psp_sva(9
            DOWNTO 0));
        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
            = '0' );
        EXIT core_rlp WHEN ( arst_n = '0' );
        -- C-Step 5 of Loop 'main'
      END LOOP main;

    END LOOP core_rlp;

    SHIFT_i_1_sva_3 := STD_LOGIC_VECTOR'("00");
    SHIFT_i_1_sva_2_sg1 := '0';
    FRAME_acc_57_psp := STD_LOGIC_VECTOR'("000000");
    FRAME_acc_59_psp := STD_LOGIC_VECTOR'("000000");
    FRAME_acc_55_sdt := STD_LOGIC_VECTOR'("0000");
    FRAME_acc_45_sdt := STD_LOGIC_VECTOR'("0000");
    FRAME_acc_28_sdt := STD_LOGIC_VECTOR'("0000");
    FRAME_acc_2_itm := STD_LOGIC_VECTOR'("0000000000");
    FRAME_acc_42_itm := STD_LOGIC_VECTOR'("0000000");
    FRAME_acc_25_itm := STD_LOGIC_VECTOR'("0000000");
    SHIFT_acc_1_psp := STD_LOGIC_VECTOR'("000");
    FRAME_acc_4_psp_sva := STD_LOGIC_VECTOR'("000000000000");
    acc_imod_4_sva := STD_LOGIC_VECTOR'("0000000");
    FRAME_acc_3_psp_sva := STD_LOGIC_VECTOR'("000000000000");
    acc_imod_2_sva := STD_LOGIC_VECTOR'("0000000");
    acc_imod_sva := STD_LOGIC_VECTOR'("0000000");
    i_3_sva_1 := STD_LOGIC_VECTOR'("000");
    blue_1_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    green_1_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    red_1_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    i_3_sva := STD_LOGIC_VECTOR'("000");
    i_4_sva_1 := STD_LOGIC_VECTOR'("000");
    b_4_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    g_4_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    r_4_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    b_3_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    g_3_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    r_3_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    b_2_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    g_2_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    r_2_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    b_1_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    g_1_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    r_1_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    b_0_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    g_0_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    r_0_sva_1 := STD_LOGIC_VECTOR'("0000000000000000");
    i_4_sva := STD_LOGIC_VECTOR'("000");
    regs_regs_4_lpi_2_dfm := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_3_lpi_2_dfm := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_2_lpi_2_dfm := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_1_lpi_2_dfm := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_0_lpi_2_dfm := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    unequal_tmp := '0';
    regs_operator_din_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    r_4_sva := STD_LOGIC_VECTOR'("0000000000000000");
    r_0_sva := STD_LOGIC_VECTOR'("0000000000000000");
    r_3_sva := STD_LOGIC_VECTOR'("0000000000000000");
    r_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
    r_2_sva := STD_LOGIC_VECTOR'("0000000000000000");
    g_4_sva := STD_LOGIC_VECTOR'("0000000000000000");
    g_0_sva := STD_LOGIC_VECTOR'("0000000000000000");
    g_3_sva := STD_LOGIC_VECTOR'("0000000000000000");
    g_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
    g_2_sva := STD_LOGIC_VECTOR'("0000000000000000");
    b_4_sva := STD_LOGIC_VECTOR'("0000000000000000");
    b_0_sva := STD_LOGIC_VECTOR'("0000000000000000");
    b_3_sva := STD_LOGIC_VECTOR'("0000000000000000");
    b_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
    b_2_sva := STD_LOGIC_VECTOR'("0000000000000000");
    blue_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
    green_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
    red_1_sva := STD_LOGIC_VECTOR'("0000000000000000");
    regs_regs_4_lpi_2 := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_3_lpi_2 := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_1_lpi_2 := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_2_lpi_2 := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_0_lpi_2 := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_4_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_0_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_3_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_1_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    regs_regs_2_sva := STD_LOGIC_VECTOR'("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    vout_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("000000000000000000000000000000");
  END PROCESS core;

END v2;

-- ------------------------------------------------------------------
--  Design Unit:    mean_vga
--  Generated from file(s):
--    7) $PROJECT_HOME/../provided_files/student_files_2015/prj2/catapult_proj/vga_blur/blur.c
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.mean_vga_mux_pkg.ALL;


ENTITY mean_vga IS
  PORT(
    vin_rsc_z : IN STD_LOGIC_VECTOR (149 DOWNTO 0);
    vout_rsc_z : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    arst_n : IN STD_LOGIC
  );
END mean_vga;

ARCHITECTURE v2 OF mean_vga IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL vin_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (149 DOWNTO 0);
  SIGNAL vout_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (149 DOWNTO 0);
  SIGNAL vin_rsc_mgc_in_wire_z : STD_LOGIC_VECTOR (149 DOWNTO 0);

  SIGNAL vout_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vout_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  COMPONENT mean_vga_core
    PORT(
      clk : IN STD_LOGIC;
      en : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      vin_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (149 DOWNTO 0);
      vout_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (29 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL mean_vga_core_inst_vin_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (149 DOWNTO
      0);
  SIGNAL mean_vga_core_inst_vout_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (29 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments

  vin_rsc_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 1,
      width => 150
      )
    PORT MAP(
      d => vin_rsc_mgc_in_wire_d_1,
      z => vin_rsc_mgc_in_wire_z
    );
  vin_rsc_mgc_in_wire_d <= vin_rsc_mgc_in_wire_d_1;
  vin_rsc_mgc_in_wire_z <= vin_rsc_z;

  vout_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 2,
      width => 30
      )
    PORT MAP(
      d => vout_rsc_mgc_out_stdreg_d_1,
      z => vout_rsc_mgc_out_stdreg_z
    );
  vout_rsc_mgc_out_stdreg_d_1 <= vout_rsc_mgc_out_stdreg_d;
  vout_rsc_z <= vout_rsc_mgc_out_stdreg_z;

  mean_vga_core_inst : mean_vga_core
    PORT MAP(
      clk => clk,
      en => en,
      arst_n => arst_n,
      vin_rsc_mgc_in_wire_d => mean_vga_core_inst_vin_rsc_mgc_in_wire_d,
      vout_rsc_mgc_out_stdreg_d => mean_vga_core_inst_vout_rsc_mgc_out_stdreg_d
    );
  mean_vga_core_inst_vin_rsc_mgc_in_wire_d <= vin_rsc_mgc_in_wire_d;
  vout_rsc_mgc_out_stdreg_d <= mean_vga_core_inst_vout_rsc_mgc_out_stdreg_d;

END v2;



