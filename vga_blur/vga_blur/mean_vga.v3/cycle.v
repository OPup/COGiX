// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-004
//  Generated date: Fri Mar 04 16:34:10 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    mean_vga_core
// ------------------------------------------------------------------


module mean_vga_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [149:0] regs_regs_2_sva;
    reg [149:0] regs_regs_1_sva;
    reg [149:0] regs_regs_3_sva;
    reg [149:0] regs_regs_0_sva;
    reg [149:0] regs_regs_4_sva;
    reg [149:0] regs_regs_0_lpi_2;
    reg [149:0] regs_regs_2_lpi_2;
    reg [149:0] regs_regs_1_lpi_2;
    reg [149:0] regs_regs_3_lpi_2;
    reg [149:0] regs_regs_4_lpi_2;
    reg [15:0] red_1_sva;
    reg [15:0] green_1_sva;
    reg [15:0] blue_1_sva;
    reg [15:0] b_2_sva;
    reg [15:0] b_1_sva;
    reg [15:0] b_3_sva;
    reg [15:0] b_0_sva;
    reg [15:0] b_4_sva;
    reg [15:0] g_2_sva;
    reg [15:0] g_1_sva;
    reg [15:0] g_3_sva;
    reg [15:0] g_0_sva;
    reg [15:0] g_4_sva;
    reg [15:0] r_2_sva;
    reg [15:0] r_1_sva;
    reg [15:0] r_3_sva;
    reg [15:0] r_0_sva;
    reg [15:0] r_4_sva;
    reg [149:0] regs_operator_din_sva;
    reg unequal_tmp;
    reg [149:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva;
    reg [149:0] regs_regs_0_lpi_2_dfm;
    reg [149:0] regs_regs_1_lpi_2_dfm;
    reg [149:0] regs_regs_2_lpi_2_dfm;
    reg [149:0] regs_regs_3_lpi_2_dfm;
    reg [149:0] regs_regs_4_lpi_2_dfm;
    reg [2:0] i_4_sva;
    reg [15:0] r_0_sva_1;
    reg [15:0] g_0_sva_1;
    reg [15:0] b_0_sva_1;
    reg [15:0] r_1_sva_1;
    reg [15:0] g_1_sva_1;
    reg [15:0] b_1_sva_1;
    reg [15:0] r_2_sva_1;
    reg [15:0] g_2_sva_1;
    reg [15:0] b_2_sva_1;
    reg [15:0] r_3_sva_1;
    reg [15:0] g_3_sva_1;
    reg [15:0] b_3_sva_1;
    reg [15:0] r_4_sva_1;
    reg [15:0] g_4_sva_1;
    reg [15:0] b_4_sva_1;
    reg [2:0] i_4_sva_1;
    reg [2:0] i_3_sva;
    reg [15:0] red_1_sva_1;
    reg [15:0] green_1_sva_1;
    reg [15:0] blue_1_sva_1;
    reg [2:0] i_3_sva_1;
    reg [6:0] acc_imod_sva;
    reg [6:0] acc_imod_2_sva;
    reg [11:0] FRAME_acc_3_psp_sva;
    reg [6:0] acc_imod_4_sva;
    reg [11:0] FRAME_acc_4_psp_sva;
    reg [2:0] SHIFT_acc_1_psp;
    reg [6:0] FRAME_acc_25_itm;
    reg [6:0] FRAME_acc_42_itm;
    reg [9:0] FRAME_acc_2_itm;
    reg [3:0] FRAME_acc_28_sdt;
    reg [3:0] FRAME_acc_45_sdt;
    reg [3:0] FRAME_acc_55_sdt;
    reg [5:0] FRAME_acc_59_psp;
    reg [5:0] FRAME_acc_57_psp;
    reg SHIFT_i_1_sva_2_sg1;
    reg [1:0] SHIFT_i_1_sva_3;

    reg[2:0] select_0;
    reg[9:0] regs_operator_mux_nl;
    reg[9:0] regs_operator_1_mux_nl;
    reg[9:0] regs_operator_2_mux_nl;
    reg[9:0] regs_operator_3_mux_nl;
    reg[9:0] regs_operator_4_mux_nl;
    reg[9:0] regs_operator_5_mux_nl;
    reg[9:0] regs_operator_6_mux_nl;
    reg[9:0] regs_operator_7_mux_nl;
    reg[9:0] regs_operator_8_mux_nl;
    reg[9:0] regs_operator_9_mux_nl;
    reg[9:0] regs_operator_10_mux_nl;
    reg[9:0] regs_operator_11_mux_nl;
    reg[9:0] regs_operator_12_mux_nl;
    reg[9:0] regs_operator_13_mux_nl;
    reg[9:0] regs_operator_14_mux_nl;
    reg[15:0] ACC2_mux_nl;
    reg[15:0] ACC2_mux_1_nl;
    reg[15:0] ACC2_mux_2_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        regs_regs_2_sva = 150'b0;
        regs_regs_1_sva = 150'b0;
        regs_regs_3_sva = 150'b0;
        regs_regs_0_sva = 150'b0;
        regs_regs_4_sva = 150'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            regs_regs_4_lpi_2 = regs_regs_4_sva;
            regs_regs_3_lpi_2 = regs_regs_3_sva;
            regs_regs_1_lpi_2 = regs_regs_1_sva;
            regs_regs_2_lpi_2 = regs_regs_2_sva;
            regs_regs_0_lpi_2 = regs_regs_0_sva;
            red_1_sva = 16'b0;
            green_1_sva = 16'b0;
            blue_1_sva = 16'b0;
            b_2_sva = 16'b0;
            b_1_sva = 16'b0;
            b_3_sva = 16'b0;
            b_0_sva = 16'b0;
            b_4_sva = 16'b0;
            g_2_sva = 16'b0;
            g_1_sva = 16'b0;
            g_3_sva = 16'b0;
            g_0_sva = 16'b0;
            g_4_sva = 16'b0;
            r_2_sva = 16'b0;
            r_1_sva = 16'b0;
            r_3_sva = 16'b0;
            r_0_sva = 16'b0;
            r_4_sva = 16'b0;
            SHIFT_i_1_sva_3 = 2'b0;
            SHIFT_i_1_sva_2_sg1 = 1'b1;
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            regs_operator_din_sva = vin_rsc_mgc_in_wire_d;
            begin : SHIFTExit
              forever begin : SHIFT
                // C-Step 0 of Loop 'SHIFT'
                begin : waitLoop1Exit
                  forever begin : waitLoop1
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop1Exit;
                  end
                end
                // C-Step 1 of Loop 'SHIFT'
                SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 150'b0;
                unequal_tmp = SHIFT_i_1_sva_2_sg1 | (SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]);
                select_0 = {SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3};
                case (select_0)
                  3'b0 : begin
                    // NOP
                  end
                  default : begin
                    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = MUX_v_150_4_2({regs_regs_0_lpi_2
                        , regs_regs_1_lpi_2 , regs_regs_2_lpi_2 , regs_regs_3_lpi_2},
                        SHIFT_i_1_sva_3 + 2'b11);
                  end
                endcase
                regs_regs_0_lpi_2_dfm = MUX_v_150_2_2({regs_operator_din_sva , regs_regs_0_lpi_2},
                    unequal_tmp);
                regs_regs_1_lpi_2_dfm = MUX_v_150_2_2({regs_regs_1_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (~ (SHIFT_i_1_sva_3[1])) & (SHIFT_i_1_sva_3[0]) & unequal_tmp);
                regs_regs_2_lpi_2_dfm = MUX_v_150_2_2({regs_regs_2_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (SHIFT_i_1_sva_3[1]) & (~ (SHIFT_i_1_sva_3[0])) & unequal_tmp);
                regs_regs_3_lpi_2_dfm = MUX_v_150_2_2({regs_regs_3_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (SHIFT_i_1_sva_3[1]) & (SHIFT_i_1_sva_3[0]) & unequal_tmp);
                regs_regs_4_lpi_2_dfm = MUX_v_150_2_2({regs_regs_4_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (~((SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]))) & unequal_tmp);
                SHIFT_acc_1_psp = ({SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3}) + 3'b111;
                if ( SHIFT_acc_1_psp[2] )
                  disable SHIFTExit;
                regs_regs_0_lpi_2 = regs_regs_0_lpi_2_dfm;
                regs_regs_1_lpi_2 = regs_regs_1_lpi_2_dfm;
                regs_regs_2_lpi_2 = regs_regs_2_lpi_2_dfm;
                regs_regs_3_lpi_2 = regs_regs_3_lpi_2_dfm;
                regs_regs_4_lpi_2 = regs_regs_4_lpi_2_dfm;
                SHIFT_i_1_sva_3 = SHIFT_acc_1_psp[1:0];
                SHIFT_i_1_sva_2_sg1 = 1'b0;
              end
            end
            i_4_sva = 3'b0;
            begin : ACC1Exit
              forever begin : ACC1
                // C-Step 0 of Loop 'ACC1'
                begin : waitLoop2Exit
                  forever begin : waitLoop2
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop2Exit;
                  end
                end
                // C-Step 1 of Loop 'ACC1'
                regs_operator_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[29:20])
                    , (regs_regs_1_lpi_2_dfm[29:20]) , (regs_regs_2_lpi_2_dfm[29:20])
                    , (regs_regs_3_lpi_2_dfm[29:20]) , (regs_regs_4_lpi_2_dfm[29:20])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                r_0_sva_1 = r_0_sva + conv_u2u_10_16(regs_operator_mux_nl);
                regs_operator_1_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[19:10])
                    , (regs_regs_1_lpi_2_dfm[19:10]) , (regs_regs_2_lpi_2_dfm[19:10])
                    , (regs_regs_3_lpi_2_dfm[19:10]) , (regs_regs_4_lpi_2_dfm[19:10])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                g_0_sva_1 = g_0_sva + conv_u2u_10_16(regs_operator_1_mux_nl);
                regs_operator_2_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[9:0])
                    , (regs_regs_1_lpi_2_dfm[9:0]) , (regs_regs_2_lpi_2_dfm[9:0])
                    , (regs_regs_3_lpi_2_dfm[9:0]) , (regs_regs_4_lpi_2_dfm[9:0])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                b_0_sva_1 = b_0_sva + conv_u2u_10_16(regs_operator_2_mux_nl);
                regs_operator_3_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[59:50])
                    , (regs_regs_1_lpi_2_dfm[59:50]) , (regs_regs_2_lpi_2_dfm[59:50])
                    , (regs_regs_3_lpi_2_dfm[59:50]) , (regs_regs_4_lpi_2_dfm[59:50])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                r_1_sva_1 = r_1_sva + conv_u2u_10_16(regs_operator_3_mux_nl);
                regs_operator_4_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[49:40])
                    , (regs_regs_1_lpi_2_dfm[49:40]) , (regs_regs_2_lpi_2_dfm[49:40])
                    , (regs_regs_3_lpi_2_dfm[49:40]) , (regs_regs_4_lpi_2_dfm[49:40])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                g_1_sva_1 = g_1_sva + conv_u2u_10_16(regs_operator_4_mux_nl);
                regs_operator_5_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[39:30])
                    , (regs_regs_1_lpi_2_dfm[39:30]) , (regs_regs_2_lpi_2_dfm[39:30])
                    , (regs_regs_3_lpi_2_dfm[39:30]) , (regs_regs_4_lpi_2_dfm[39:30])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                b_1_sva_1 = b_1_sva + conv_u2u_10_16(regs_operator_5_mux_nl);
                regs_operator_6_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[89:80])
                    , (regs_regs_1_lpi_2_dfm[89:80]) , (regs_regs_2_lpi_2_dfm[89:80])
                    , (regs_regs_3_lpi_2_dfm[89:80]) , (regs_regs_4_lpi_2_dfm[89:80])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                r_2_sva_1 = r_2_sva + conv_u2u_10_16(regs_operator_6_mux_nl);
                regs_operator_7_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[79:70])
                    , (regs_regs_1_lpi_2_dfm[79:70]) , (regs_regs_2_lpi_2_dfm[79:70])
                    , (regs_regs_3_lpi_2_dfm[79:70]) , (regs_regs_4_lpi_2_dfm[79:70])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                g_2_sva_1 = g_2_sva + conv_u2u_10_16(regs_operator_7_mux_nl);
                regs_operator_8_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[69:60])
                    , (regs_regs_1_lpi_2_dfm[69:60]) , (regs_regs_2_lpi_2_dfm[69:60])
                    , (regs_regs_3_lpi_2_dfm[69:60]) , (regs_regs_4_lpi_2_dfm[69:60])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                b_2_sva_1 = b_2_sva + conv_u2u_10_16(regs_operator_8_mux_nl);
                regs_operator_9_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[119:110])
                    , (regs_regs_1_lpi_2_dfm[119:110]) , (regs_regs_2_lpi_2_dfm[119:110])
                    , (regs_regs_3_lpi_2_dfm[119:110]) , (regs_regs_4_lpi_2_dfm[119:110])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                r_3_sva_1 = r_3_sva + conv_u2u_10_16(regs_operator_9_mux_nl);
                regs_operator_10_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[109:100])
                    , (regs_regs_1_lpi_2_dfm[109:100]) , (regs_regs_2_lpi_2_dfm[109:100])
                    , (regs_regs_3_lpi_2_dfm[109:100]) , (regs_regs_4_lpi_2_dfm[109:100])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                g_3_sva_1 = g_3_sva + conv_u2u_10_16(regs_operator_10_mux_nl);
                regs_operator_11_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[99:90])
                    , (regs_regs_1_lpi_2_dfm[99:90]) , (regs_regs_2_lpi_2_dfm[99:90])
                    , (regs_regs_3_lpi_2_dfm[99:90]) , (regs_regs_4_lpi_2_dfm[99:90])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                b_3_sva_1 = b_3_sva + conv_u2u_10_16(regs_operator_11_mux_nl);
                regs_operator_12_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[149:140])
                    , (regs_regs_1_lpi_2_dfm[149:140]) , (regs_regs_2_lpi_2_dfm[149:140])
                    , (regs_regs_3_lpi_2_dfm[149:140]) , (regs_regs_4_lpi_2_dfm[149:140])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                r_4_sva_1 = r_4_sva + conv_u2u_10_16(regs_operator_12_mux_nl);
                regs_operator_13_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[139:130])
                    , (regs_regs_1_lpi_2_dfm[139:130]) , (regs_regs_2_lpi_2_dfm[139:130])
                    , (regs_regs_3_lpi_2_dfm[139:130]) , (regs_regs_4_lpi_2_dfm[139:130])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                g_4_sva_1 = g_4_sva + conv_u2u_10_16(regs_operator_13_mux_nl);
                regs_operator_14_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[129:120])
                    , (regs_regs_1_lpi_2_dfm[129:120]) , (regs_regs_2_lpi_2_dfm[129:120])
                    , (regs_regs_3_lpi_2_dfm[129:120]) , (regs_regs_4_lpi_2_dfm[129:120])
                    , 10'b0 , 10'b0 , 10'b0}, i_4_sva);
                b_4_sva_1 = b_4_sva + conv_u2u_10_16(regs_operator_14_mux_nl);
                i_4_sva_1 = i_4_sva + 3'b1;
                if ( ~ (readslicef_4_1_3((conv_u2s_3_4(i_4_sva_1) + 4'b1011))) )
                  disable ACC1Exit;
                r_0_sva = r_0_sva_1;
                r_1_sva = r_1_sva_1;
                r_2_sva = r_2_sva_1;
                r_3_sva = r_3_sva_1;
                r_4_sva = r_4_sva_1;
                g_0_sva = g_0_sva_1;
                g_1_sva = g_1_sva_1;
                g_2_sva = g_2_sva_1;
                g_3_sva = g_3_sva_1;
                g_4_sva = g_4_sva_1;
                b_0_sva = b_0_sva_1;
                b_1_sva = b_1_sva_1;
                b_2_sva = b_2_sva_1;
                b_3_sva = b_3_sva_1;
                b_4_sva = b_4_sva_1;
                i_4_sva = i_4_sva_1;
              end
            end
            i_3_sva = 3'b0;
            begin : ACC2Exit
              forever begin : ACC2
                // C-Step 0 of Loop 'ACC2'
                begin : waitLoop3Exit
                  forever begin : waitLoop3
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop3Exit;
                  end
                end
                // C-Step 1 of Loop 'ACC2'
                ACC2_mux_nl = MUX_v_16_8_2({r_0_sva_1 , r_1_sva_1 , r_2_sva_1 , r_3_sva_1
                    , r_4_sva_1 , 16'b0 , 16'b0 , 16'b0}, i_3_sva);
                red_1_sva_1 = red_1_sva + (ACC2_mux_nl);
                ACC2_mux_1_nl = MUX_v_16_8_2({g_0_sva_1 , g_1_sva_1 , g_2_sva_1 ,
                    g_3_sva_1 , g_4_sva_1 , 16'b0 , 16'b0 , 16'b0}, i_3_sva);
                green_1_sva_1 = green_1_sva + (ACC2_mux_1_nl);
                ACC2_mux_2_nl = MUX_v_16_8_2({b_0_sva_1 , b_1_sva_1 , b_2_sva_1 ,
                    b_3_sva_1 , b_4_sva_1 , 16'b0 , 16'b0 , 16'b0}, i_3_sva);
                blue_1_sva_1 = blue_1_sva + (ACC2_mux_2_nl);
                i_3_sva_1 = i_3_sva + 3'b1;
                if ( ~ (readslicef_4_1_3((conv_u2s_3_4(i_3_sva_1) + 4'b1011))) )
                  disable ACC2Exit;
                red_1_sva = red_1_sva_1;
                green_1_sva = green_1_sva_1;
                blue_1_sva = blue_1_sva_1;
                i_3_sva = i_3_sva_1;
              end
            end
            regs_regs_0_sva = regs_regs_0_lpi_2_dfm;
            regs_regs_1_sva = regs_regs_1_lpi_2_dfm;
            regs_regs_2_sva = regs_regs_2_lpi_2_dfm;
            regs_regs_3_sva = regs_regs_3_lpi_2_dfm;
            regs_regs_4_sva = regs_regs_4_lpi_2_dfm;
            begin : waitLoop4Exit
              forever begin : waitLoop4
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop4Exit;
              end
            end
            // C-Step 2 of Loop 'main'
            acc_imod_sva = conv_s2s_6_7(6'b10011 + (conv_u2u_5_6(conv_u2u_4_5({(~
                (red_1_sva_1[4])) , 2'b11 , (~ (red_1_sva_1[4]))}) + conv_u2u_4_5({(red_1_sva_1[5])
                , (red_1_sva_1[9:7])})) + conv_u2u_5_6(conv_u2u_4_5({(red_1_sva_1[14])
                , 2'b0 , (red_1_sva_1[14])}) + conv_u2u_4_5({(~ (red_1_sva_1[15]))
                , 2'b11 , (~ (red_1_sva_1[5]))})))) + (conv_s2s_5_7(({(red_1_sva_1[6])
                , 1'b0 , (red_1_sva_1[6]) , 1'b0 , (red_1_sva_1[6])}) + conv_u2s_4_5(red_1_sva_1[3:0]))
                + conv_u2s_5_7(conv_u2u_4_5(~ (red_1_sva_1[13:10])) + conv_u2u_4_5({(red_1_sva_1[9:7])
                , (red_1_sva_1[15])})));
            acc_imod_2_sva = conv_s2s_6_7(6'b10011 + (conv_u2u_5_6(conv_u2u_4_5({(~
                (green_1_sva_1[4])) , 2'b11 , (~ (green_1_sva_1[4]))}) + conv_u2u_4_5({(green_1_sva_1[5])
                , (green_1_sva_1[9:7])})) + conv_u2u_5_6(conv_u2u_4_5({(green_1_sva_1[14])
                , 2'b0 , (green_1_sva_1[14])}) + conv_u2u_4_5({(~ (green_1_sva_1[15]))
                , 2'b11 , (~ (green_1_sva_1[5]))})))) + (conv_s2s_5_7(({(green_1_sva_1[6])
                , 1'b0 , (green_1_sva_1[6]) , 1'b0 , (green_1_sva_1[6])}) + conv_u2s_4_5(green_1_sva_1[3:0]))
                + conv_u2s_5_7(conv_u2u_4_5(~ (green_1_sva_1[13:10])) + conv_u2u_4_5({(green_1_sva_1[9:7])
                , (green_1_sva_1[15])})));
            FRAME_acc_57_psp = conv_u2u_5_6(signext_5_1(green_1_sva_1[15])) + conv_u2u_4_6(signext_4_1(green_1_sva_1[14]));
            FRAME_acc_28_sdt = ({(~ (acc_imod_2_sva[4])) , 2'b11 , (~ (acc_imod_2_sva[4]))})
                + conv_s2u_2_4(~ (acc_imod_2_sva[6:5]));
            FRAME_acc_25_itm = (conv_u2s_5_7({(green_1_sva_1[9:6]) , (green_1_sva_1[4])})
                + conv_s2s_3_7(conv_u2s_2_3(conv_u2u_1_2(green_1_sva_1[6]) + conv_u2u_1_2(acc_imod_2_sva[4]))
                + conv_s2s_2_3(acc_imod_2_sva[6:5]))) + conv_s2s_5_7(conv_u2s_3_5(green_1_sva_1[9:7])
                + conv_s2s_2_5(conv_s2s_1_2(readslicef_6_1_5((({(conv_s2u_4_5({(acc_imod_2_sva[6:5])
                , 2'b1}) + conv_u2u_3_5(FRAME_acc_28_sdt[3:1])) , (FRAME_acc_28_sdt[0])})
                + conv_s2s_5_6({1'b1 , (acc_imod_2_sva[3:0])})))) + conv_u2s_1_2(green_1_sva_1[5])));
            acc_imod_4_sva = conv_s2s_6_7(6'b10011 + (conv_u2u_5_6(conv_u2u_4_5({(~
                (blue_1_sva_1[4])) , 2'b11 , (~ (blue_1_sva_1[4]))}) + conv_u2u_4_5({(blue_1_sva_1[5])
                , (blue_1_sva_1[9:7])})) + conv_u2u_5_6(conv_u2u_4_5({(blue_1_sva_1[14])
                , 2'b0 , (blue_1_sva_1[14])}) + conv_u2u_4_5({(~ (blue_1_sva_1[15]))
                , 2'b11 , (~ (blue_1_sva_1[5]))})))) + (conv_s2s_5_7(({(blue_1_sva_1[6])
                , 1'b0 , (blue_1_sva_1[6]) , 1'b0 , (blue_1_sva_1[6])}) + conv_u2s_4_5(blue_1_sva_1[3:0]))
                + conv_u2s_5_7(conv_u2u_4_5(~ (blue_1_sva_1[13:10])) + conv_u2u_4_5({(blue_1_sva_1[9:7])
                , (blue_1_sva_1[15])})));
            FRAME_acc_59_psp = conv_u2u_5_6(signext_5_1(blue_1_sva_1[15])) + conv_u2u_4_6(signext_4_1(blue_1_sva_1[14]));
            FRAME_acc_45_sdt = ({(~ (acc_imod_4_sva[4])) , 2'b11 , (~ (acc_imod_4_sva[4]))})
                + conv_s2u_2_4(~ (acc_imod_4_sva[6:5]));
            FRAME_acc_42_itm = (conv_u2s_5_7({(blue_1_sva_1[9:6]) , (blue_1_sva_1[4])})
                + conv_s2s_3_7(conv_u2s_2_3(conv_u2u_1_2(blue_1_sva_1[6]) + conv_u2u_1_2(acc_imod_4_sva[4]))
                + conv_s2s_2_3(acc_imod_4_sva[6:5]))) + conv_s2s_5_7(conv_u2s_3_5(blue_1_sva_1[9:7])
                + conv_s2s_2_5(conv_s2s_1_2(readslicef_6_1_5((({(conv_s2u_4_5({(acc_imod_4_sva[6:5])
                , 2'b1}) + conv_u2u_3_5(FRAME_acc_45_sdt[3:1])) , (FRAME_acc_45_sdt[0])})
                + conv_s2s_5_6({1'b1 , (acc_imod_4_sva[3:0])})))) + conv_u2s_1_2(blue_1_sva_1[5])));
            FRAME_acc_55_sdt = ({(~ (acc_imod_sva[4])) , 2'b11 , (~ (acc_imod_sva[4]))})
                + conv_s2u_2_4(~ (acc_imod_sva[6:5]));
            FRAME_acc_2_itm = (({(red_1_sva_1[14]) , 1'b0 , (red_1_sva_1[14]) , 3'b0
                , (signext_4_1(red_1_sva_1[14]))}) + conv_u2u_20_10(conv_u2u_4_10(red_1_sva_1[13:10])
                * 10'b101001)) + (conv_u2s_9_10({(red_1_sva_1[15]) , 3'b0 , (signext_5_1(red_1_sva_1[15]))})
                + conv_s2s_7_10((conv_u2s_5_7({(red_1_sva_1[9:6]) , (red_1_sva_1[4])})
                + conv_s2s_3_7(conv_u2s_2_3(conv_u2u_1_2(red_1_sva_1[6]) + conv_u2u_1_2(acc_imod_sva[4]))
                + conv_s2s_2_3(acc_imod_sva[6:5]))) + conv_s2s_5_7(conv_u2s_3_5(red_1_sva_1[9:7])
                + conv_s2s_2_5(conv_s2s_1_2(readslicef_6_1_5((({(conv_s2u_4_5({(acc_imod_sva[6:5])
                , 2'b1}) + conv_u2u_3_5(FRAME_acc_55_sdt[3:1])) , (FRAME_acc_55_sdt[0])})
                + conv_s2s_5_6({1'b1 , (acc_imod_sva[3:0])})))) + conv_u2s_1_2(red_1_sva_1[5])))));
            begin : waitLoop5Exit
              forever begin : waitLoop5
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop5Exit;
              end
            end
            // C-Step 3 of Loop 'main'
            FRAME_acc_4_psp_sva = conv_u2u_11_12({(blue_1_sva_1[15:14]) , (blue_1_sva_1[15:14])
                , 1'b0 , FRAME_acc_59_psp}) + conv_s2u_11_12(conv_u2s_10_12(conv_u2s_20_11(conv_u2u_4_10(blue_1_sva_1[13:10])
                * 10'b101001)) + conv_s2s_7_11(FRAME_acc_42_itm));
            begin : waitLoop6Exit
              forever begin : waitLoop6
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop6Exit;
              end
            end
            // C-Step 4 of Loop 'main'
            FRAME_acc_3_psp_sva = conv_u2u_11_12({(green_1_sva_1[15:14]) , (green_1_sva_1[15:14])
                , 1'b0 , FRAME_acc_57_psp}) + conv_s2u_11_12(conv_u2s_10_12(conv_u2s_20_11(conv_u2u_4_10(green_1_sva_1[13:10])
                * 10'b101001)) + conv_s2s_7_11(FRAME_acc_25_itm));
            vout_rsc_mgc_out_stdreg_d <= {(FRAME_acc_2_itm | ({8'b0, FRAME_acc_3_psp_sva[11:10]}))
                , (FRAME_acc_3_psp_sva[9:6]) , ((FRAME_acc_3_psp_sva[5:0]) | ({4'b0,
                FRAME_acc_4_psp_sva[11:10]})) , (FRAME_acc_4_psp_sva[9:0])};
            begin : waitLoop7Exit
              forever begin : waitLoop7
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop7Exit;
              end
            end
            // C-Step 5 of Loop 'main'
          end
        end
      end
    end
    SHIFT_i_1_sva_3 = 2'b0;
    SHIFT_i_1_sva_2_sg1 = 1'b0;
    FRAME_acc_57_psp = 6'b0;
    FRAME_acc_59_psp = 6'b0;
    FRAME_acc_55_sdt = 4'b0;
    FRAME_acc_45_sdt = 4'b0;
    FRAME_acc_28_sdt = 4'b0;
    FRAME_acc_2_itm = 10'b0;
    FRAME_acc_42_itm = 7'b0;
    FRAME_acc_25_itm = 7'b0;
    SHIFT_acc_1_psp = 3'b0;
    FRAME_acc_4_psp_sva = 12'b0;
    acc_imod_4_sva = 7'b0;
    FRAME_acc_3_psp_sva = 12'b0;
    acc_imod_2_sva = 7'b0;
    acc_imod_sva = 7'b0;
    i_3_sva_1 = 3'b0;
    blue_1_sva_1 = 16'b0;
    green_1_sva_1 = 16'b0;
    red_1_sva_1 = 16'b0;
    i_3_sva = 3'b0;
    i_4_sva_1 = 3'b0;
    b_4_sva_1 = 16'b0;
    g_4_sva_1 = 16'b0;
    r_4_sva_1 = 16'b0;
    b_3_sva_1 = 16'b0;
    g_3_sva_1 = 16'b0;
    r_3_sva_1 = 16'b0;
    b_2_sva_1 = 16'b0;
    g_2_sva_1 = 16'b0;
    r_2_sva_1 = 16'b0;
    b_1_sva_1 = 16'b0;
    g_1_sva_1 = 16'b0;
    r_1_sva_1 = 16'b0;
    b_0_sva_1 = 16'b0;
    g_0_sva_1 = 16'b0;
    r_0_sva_1 = 16'b0;
    i_4_sva = 3'b0;
    regs_regs_4_lpi_2_dfm = 150'b0;
    regs_regs_3_lpi_2_dfm = 150'b0;
    regs_regs_2_lpi_2_dfm = 150'b0;
    regs_regs_1_lpi_2_dfm = 150'b0;
    regs_regs_0_lpi_2_dfm = 150'b0;
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 150'b0;
    unequal_tmp = 1'b0;
    regs_operator_din_sva = 150'b0;
    r_4_sva = 16'b0;
    r_0_sva = 16'b0;
    r_3_sva = 16'b0;
    r_1_sva = 16'b0;
    r_2_sva = 16'b0;
    g_4_sva = 16'b0;
    g_0_sva = 16'b0;
    g_3_sva = 16'b0;
    g_1_sva = 16'b0;
    g_2_sva = 16'b0;
    b_4_sva = 16'b0;
    b_0_sva = 16'b0;
    b_3_sva = 16'b0;
    b_1_sva = 16'b0;
    b_2_sva = 16'b0;
    blue_1_sva = 16'b0;
    green_1_sva = 16'b0;
    red_1_sva = 16'b0;
    regs_regs_4_lpi_2 = 150'b0;
    regs_regs_3_lpi_2 = 150'b0;
    regs_regs_1_lpi_2 = 150'b0;
    regs_regs_2_lpi_2 = 150'b0;
    regs_regs_0_lpi_2 = 150'b0;
    regs_regs_4_sva = 150'b0;
    regs_regs_0_sva = 150'b0;
    regs_regs_3_sva = 150'b0;
    regs_regs_1_sva = 150'b0;
    regs_regs_2_sva = 150'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [149:0] MUX_v_150_4_2;
    input [599:0] inputs;
    input [1:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[599:450];
      end
      2'b01 : begin
        result = inputs[449:300];
      end
      2'b10 : begin
        result = inputs[299:150];
      end
      2'b11 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[599:450];
      end
    endcase
    MUX_v_150_4_2 = result;
  end
  endfunction


  function [149:0] MUX_v_150_2_2;
    input [299:0] inputs;
    input [0:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[299:150];
      end
      1'b1 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[299:150];
      end
    endcase
    MUX_v_150_2_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_8_2;
    input [79:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[79:70];
      end
      3'b001 : begin
        result = inputs[69:60];
      end
      3'b010 : begin
        result = inputs[59:50];
      end
      3'b011 : begin
        result = inputs[49:40];
      end
      3'b100 : begin
        result = inputs[39:30];
      end
      3'b101 : begin
        result = inputs[29:20];
      end
      3'b110 : begin
        result = inputs[19:10];
      end
      3'b111 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[79:70];
      end
    endcase
    MUX_v_10_8_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [15:0] MUX_v_16_8_2;
    input [127:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[127:112];
      end
      3'b001 : begin
        result = inputs[111:96];
      end
      3'b010 : begin
        result = inputs[95:80];
      end
      3'b011 : begin
        result = inputs[79:64];
      end
      3'b100 : begin
        result = inputs[63:48];
      end
      3'b101 : begin
        result = inputs[47:32];
      end
      3'b110 : begin
        result = inputs[31:16];
      end
      3'b111 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[127:112];
      end
    endcase
    MUX_v_16_8_2 = result;
  end
  endfunction


  function [4:0] signext_5_1;
    input [0:0] vector;
  begin
    signext_5_1= {{4{vector[0]}}, vector};
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function  [15:0] conv_u2u_10_16 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_16 = {{6{1'b0}}, vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2s_6_7 = {vector[5], vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [5:0] conv_u2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [3:0] conv_s2u_2_4 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_3_7 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_7 = {{4{vector[2]}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [4:0] conv_u2s_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_2_5 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_5 = {{3{vector[1]}}, vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function  [4:0] conv_s2u_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2u_4_5 = {vector[3], vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [5:0] conv_s2s_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_20_10 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_10 = vector[9:0];
  end
  endfunction


  function  [9:0] conv_u2u_4_10 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_10 = {{6{1'b0}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_7_10 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_10 = {{3{vector[6]}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_s2u_11_12 ;
    input signed [10:0]  vector ;
  begin
    conv_s2u_11_12 = {vector[10], vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_20_11 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_11 = vector[10:0];
  end
  endfunction


  function signed [10:0] conv_s2s_7_11 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_11 = {{4{vector[6]}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mean_vga
//  Generated from file(s):
//    7) $PROJECT_HOME/../provided_files/student_files_2015/prj2/catapult_proj/vga_blur/blur.c
// ------------------------------------------------------------------


module mean_vga (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mean_vga_core mean_vga_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



