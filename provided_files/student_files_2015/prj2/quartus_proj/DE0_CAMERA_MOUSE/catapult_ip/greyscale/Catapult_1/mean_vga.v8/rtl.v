// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-004
//  Generated date: Fri Mar 11 16:43:17 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    mean_vga_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module mean_vga_core_fsm (
  clk, en, arst_n, fsm_output, st_SHIFT_tr0, st_ACC1_1_tr0
);
  input clk;
  input en;
  input arst_n;
  output [5:0] fsm_output;
  reg [5:0] fsm_output;
  input st_SHIFT_tr0;
  input st_ACC1_1_tr0;


  // FSM State Type Declaration for mean_vga_core_fsm_1
  parameter
    st_main = 3'd0,
    st_SHIFT = 3'd1,
    st_ACC1 = 3'd2,
    st_ACC1_1 = 3'd3,
    st_main_1 = 3'd4,
    st_main_2 = 3'd5,
    state_x = 3'b000;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : mean_vga_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 6'b1;
        state_var_NS = st_SHIFT;
      end
      st_SHIFT : begin
        fsm_output = 6'b10;
        if ( st_SHIFT_tr0 ) begin
          state_var_NS = st_ACC1;
        end
        else begin
          state_var_NS = st_SHIFT;
        end
      end
      st_ACC1 : begin
        fsm_output = 6'b100;
        state_var_NS = st_ACC1_1;
      end
      st_ACC1_1 : begin
        fsm_output = 6'b1000;
        if ( st_ACC1_1_tr0 ) begin
          state_var_NS = st_main_1;
        end
        else begin
          state_var_NS = st_ACC1;
        end
      end
      st_main_1 : begin
        fsm_output = 6'b10000;
        state_var_NS = st_main_2;
      end
      st_main_2 : begin
        fsm_output = 6'b100000;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 6'b000000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mean_vga_core
// ------------------------------------------------------------------


module mean_vga_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [5:0] fsm_output;
  wire and_dcpl;
  wire or_dcpl_6;
  wire or_dcpl_10;
  reg [149:0] regs_regs_2_sva;
  reg [149:0] regs_regs_1_sva;
  reg [149:0] regs_regs_3_sva;
  reg [149:0] regs_regs_0_sva;
  reg [149:0] regs_regs_0_lpi_2;
  reg [149:0] regs_regs_2_lpi_2;
  reg [149:0] regs_regs_1_lpi_2;
  reg [149:0] regs_regs_3_lpi_2;
  reg [149:0] regs_regs_4_lpi_2;
  reg [20:0] grey_1_sva;
  reg [149:0] regs_operator_din_sva;
  reg [149:0] regs_regs_0_lpi_2_dfm;
  reg [149:0] regs_regs_1_lpi_2_dfm;
  reg [149:0] regs_regs_2_lpi_2_dfm;
  reg [149:0] regs_regs_3_lpi_2_dfm;
  reg [149:0] regs_regs_4_lpi_2_dfm;
  reg [2:0] i_2_sva;
  reg [20:0] grey_1_sva_1;
  reg [2:0] i_2_sva_1;
  reg [16:0] ACC1_acc_62_itm;
  wire [17:0] nl_ACC1_acc_62_itm;
  reg [11:0] ACC1_acc_24_itm;
  wire [12:0] nl_ACC1_acc_24_itm;
  reg [16:0] ACC1_acc_63_itm;
  wire [17:0] nl_ACC1_acc_63_itm;
  reg ACC1_slc_itm;
  reg SHIFT_i_1_sva_2_sg1;
  reg [1:0] SHIFT_i_1_sva_3;
  wire [3:0] z_out;
  wire [4:0] nl_z_out;
  wire [2:0] z_out_1;
  wire [3:0] nl_z_out_1;
  wire [20:0] grey_1_sva_mx0w1;
  wire [21:0] nl_grey_1_sva_mx0w1;
  wire [149:0] regs_regs_4_lpi_3;
  wire [149:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva;
  wire [11:0] ACC1_acc_20_psp_sva;
  wire [12:0] nl_ACC1_acc_20_psp_sva;
  wire [3:0] acc_13_psp_sva;
  wire [4:0] nl_acc_13_psp_sva;
  wire [11:0] ACC1_acc_17_psp_sva;
  wire [12:0] nl_ACC1_acc_17_psp_sva;
  wire [2:0] acc_imod_1_sva;
  wire [3:0] nl_acc_imod_1_sva;
  wire [3:0] acc_1_psp_sva;
  wire [4:0] nl_acc_1_psp_sva;
  wire [11:0] ACC1_acc_19_psp_sva;
  wire [12:0] nl_ACC1_acc_19_psp_sva;
  wire [2:0] acc_imod_7_sva;
  wire [3:0] nl_acc_imod_7_sva;
  wire [3:0] acc_9_psp_sva;
  wire [4:0] nl_acc_9_psp_sva;
  wire [11:0] ACC1_acc_18_psp_sva;
  wire [12:0] nl_ACC1_acc_18_psp_sva;
  wire [2:0] acc_imod_4_sva;
  wire [3:0] nl_acc_imod_4_sva;
  wire [3:0] acc_5_psp_sva;
  wire [4:0] nl_acc_5_psp_sva;
  wire [11:0] ACC1_acc_21_psp_sva;
  wire [12:0] nl_ACC1_acc_21_psp_sva;
  wire [2:0] acc_imod_13_sva;
  wire [3:0] nl_acc_imod_13_sva;
  wire [3:0] acc_17_psp_sva;
  wire [4:0] nl_acc_17_psp_sva;
  wire nand_1_tmp;
  wire or_16_tmp;
  wire or_17_tmp;
  wire or_18_tmp;

  wire[9:0] regs_operator_11_mux_nl;
  wire[9:0] regs_operator_10_mux_nl;
  wire[9:0] regs_operator_9_mux_nl;
  wire[9:0] regs_operator_2_mux_nl;
  wire[9:0] regs_operator_1_mux_nl;
  wire[9:0] regs_operator_mux_nl;
  wire[9:0] regs_operator_8_mux_nl;
  wire[9:0] regs_operator_7_mux_nl;
  wire[9:0] regs_operator_6_mux_nl;
  wire[9:0] regs_operator_5_mux_nl;
  wire[9:0] regs_operator_4_mux_nl;
  wire[9:0] regs_operator_3_mux_nl;
  wire[9:0] regs_operator_14_mux_nl;
  wire[9:0] regs_operator_13_mux_nl;
  wire[9:0] regs_operator_12_mux_nl;
  wire[2:0] mux_21_nl;
  wire[1:0] mux_20_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_mean_vga_core_fsm_inst_st_SHIFT_tr0;
  assign nl_mean_vga_core_fsm_inst_st_SHIFT_tr0 = z_out[2];
  wire [0:0] nl_mean_vga_core_fsm_inst_st_ACC1_1_tr0;
  assign nl_mean_vga_core_fsm_inst_st_ACC1_1_tr0 = ~ ACC1_slc_itm;
  mean_vga_core_fsm mean_vga_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output),
      .st_SHIFT_tr0(nl_mean_vga_core_fsm_inst_st_SHIFT_tr0),
      .st_ACC1_1_tr0(nl_mean_vga_core_fsm_inst_st_ACC1_1_tr0)
    );
  assign nand_1_tmp = ~((SHIFT_i_1_sva_3[1]) & (SHIFT_i_1_sva_3[0]));
  assign or_16_tmp = (~ (SHIFT_i_1_sva_3[1])) | (SHIFT_i_1_sva_3[0]);
  assign or_17_tmp = (SHIFT_i_1_sva_3[1]) | (~ (SHIFT_i_1_sva_3[0]));
  assign or_18_tmp = or_dcpl_6 | SHIFT_i_1_sva_2_sg1;
  assign nl_grey_1_sva_mx0w1 = conv_u2u_19_21(conv_u2u_18_19(conv_u2u_17_18(ACC1_acc_62_itm)
      + conv_u2u_16_18({{4{ACC1_acc_24_itm[11]}}, ACC1_acc_24_itm})) + conv_u2u_17_19(ACC1_acc_63_itm))
      + grey_1_sva;
  assign grey_1_sva_mx0w1 = nl_grey_1_sva_mx0w1[20:0];
  assign regs_regs_4_lpi_3 = MUX_v_150_2_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
      , regs_regs_4_lpi_2}, or_dcpl_6 | (~ SHIFT_i_1_sva_2_sg1));
  assign SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = MUX_v_150_4_2({regs_regs_0_lpi_2
      , regs_regs_1_lpi_2 , regs_regs_2_lpi_2 , regs_regs_3_lpi_2}, z_out_1[1:0]);
  assign regs_operator_11_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[99:90]) ,
      (regs_regs_1_lpi_2_dfm[99:90]) , (regs_regs_2_lpi_2_dfm[99:90]) , (regs_regs_3_lpi_2_dfm[99:90])
      , (regs_regs_4_lpi_2_dfm[99:90]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_10_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[109:100])
      , (regs_regs_1_lpi_2_dfm[109:100]) , (regs_regs_2_lpi_2_dfm[109:100]) , (regs_regs_3_lpi_2_dfm[109:100])
      , (regs_regs_4_lpi_2_dfm[109:100]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_9_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[119:110])
      , (regs_regs_1_lpi_2_dfm[119:110]) , (regs_regs_2_lpi_2_dfm[119:110]) , (regs_regs_3_lpi_2_dfm[119:110])
      , (regs_regs_4_lpi_2_dfm[119:110]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign nl_ACC1_acc_20_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_11_mux_nl)
      + conv_u2u_10_11(regs_operator_10_mux_nl)) + conv_u2u_10_12(regs_operator_9_mux_nl);
  assign ACC1_acc_20_psp_sva = nl_ACC1_acc_20_psp_sva[11:0];
  assign nl_acc_13_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_20_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_20_psp_sva[4])
      , (ACC1_acc_20_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_20_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_20_psp_sva[6])
      , (~ (ACC1_acc_20_psp_sva[7]))})))) , (ACC1_acc_20_psp_sva[10])})))) , 1'b1})
      + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (ACC1_acc_20_psp_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(ACC1_acc_20_psp_sva[2]) , (~ (ACC1_acc_20_psp_sva[9]))}))))
      , (~ (ACC1_acc_20_psp_sva[11]))})))) + ({3'b101 , (ACC1_acc_20_psp_sva[0])});
  assign acc_13_psp_sva = nl_acc_13_psp_sva[3:0];
  assign regs_operator_2_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[9:0]) , (regs_regs_1_lpi_2_dfm[9:0])
      , (regs_regs_2_lpi_2_dfm[9:0]) , (regs_regs_3_lpi_2_dfm[9:0]) , (regs_regs_4_lpi_2_dfm[9:0])
      , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_1_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[19:10]) ,
      (regs_regs_1_lpi_2_dfm[19:10]) , (regs_regs_2_lpi_2_dfm[19:10]) , (regs_regs_3_lpi_2_dfm[19:10])
      , (regs_regs_4_lpi_2_dfm[19:10]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[29:20]) , (regs_regs_1_lpi_2_dfm[29:20])
      , (regs_regs_2_lpi_2_dfm[29:20]) , (regs_regs_3_lpi_2_dfm[29:20]) , (regs_regs_4_lpi_2_dfm[29:20])
      , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign nl_ACC1_acc_17_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_2_mux_nl)
      + conv_u2u_10_11(regs_operator_1_mux_nl)) + conv_u2u_10_12(regs_operator_mux_nl);
  assign ACC1_acc_17_psp_sva = nl_ACC1_acc_17_psp_sva[11:0];
  assign nl_acc_imod_1_sva = conv_s2s_2_3(conv_s2s_1_2(acc_1_psp_sva[1]) + conv_u2s_1_2(acc_1_psp_sva[0]))
      + conv_s2s_2_3(acc_1_psp_sva[3:2]);
  assign acc_imod_1_sva = nl_acc_imod_1_sva[2:0];
  assign nl_acc_1_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_17_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_17_psp_sva[4])
      , (ACC1_acc_17_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_17_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_17_psp_sva[6])
      , (~ (ACC1_acc_17_psp_sva[7]))})))) , (ACC1_acc_17_psp_sva[10])})))) , 1'b1})
      + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (ACC1_acc_17_psp_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(ACC1_acc_17_psp_sva[2]) , (~ (ACC1_acc_17_psp_sva[9]))}))))
      , (~ (ACC1_acc_17_psp_sva[11]))})))) + ({3'b101 , (ACC1_acc_17_psp_sva[0])});
  assign acc_1_psp_sva = nl_acc_1_psp_sva[3:0];
  assign regs_operator_8_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[69:60]) ,
      (regs_regs_1_lpi_2_dfm[69:60]) , (regs_regs_2_lpi_2_dfm[69:60]) , (regs_regs_3_lpi_2_dfm[69:60])
      , (regs_regs_4_lpi_2_dfm[69:60]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_7_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[79:70]) ,
      (regs_regs_1_lpi_2_dfm[79:70]) , (regs_regs_2_lpi_2_dfm[79:70]) , (regs_regs_3_lpi_2_dfm[79:70])
      , (regs_regs_4_lpi_2_dfm[79:70]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_6_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[89:80]) ,
      (regs_regs_1_lpi_2_dfm[89:80]) , (regs_regs_2_lpi_2_dfm[89:80]) , (regs_regs_3_lpi_2_dfm[89:80])
      , (regs_regs_4_lpi_2_dfm[89:80]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign nl_ACC1_acc_19_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_8_mux_nl)
      + conv_u2u_10_11(regs_operator_7_mux_nl)) + conv_u2u_10_12(regs_operator_6_mux_nl);
  assign ACC1_acc_19_psp_sva = nl_ACC1_acc_19_psp_sva[11:0];
  assign nl_acc_imod_7_sva = conv_s2s_2_3(conv_s2s_1_2(acc_9_psp_sva[1]) + conv_u2s_1_2(acc_9_psp_sva[0]))
      + conv_s2s_2_3(acc_9_psp_sva[3:2]);
  assign acc_imod_7_sva = nl_acc_imod_7_sva[2:0];
  assign nl_acc_9_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_19_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_19_psp_sva[4])
      , (ACC1_acc_19_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_19_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_19_psp_sva[6])
      , (~ (ACC1_acc_19_psp_sva[7]))})))) , (ACC1_acc_19_psp_sva[10])})))) , 1'b1})
      + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (ACC1_acc_19_psp_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(ACC1_acc_19_psp_sva[2]) , (~ (ACC1_acc_19_psp_sva[9]))}))))
      , (~ (ACC1_acc_19_psp_sva[11]))})))) + ({3'b101 , (ACC1_acc_19_psp_sva[0])});
  assign acc_9_psp_sva = nl_acc_9_psp_sva[3:0];
  assign regs_operator_5_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[39:30]) ,
      (regs_regs_1_lpi_2_dfm[39:30]) , (regs_regs_2_lpi_2_dfm[39:30]) , (regs_regs_3_lpi_2_dfm[39:30])
      , (regs_regs_4_lpi_2_dfm[39:30]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_4_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[49:40]) ,
      (regs_regs_1_lpi_2_dfm[49:40]) , (regs_regs_2_lpi_2_dfm[49:40]) , (regs_regs_3_lpi_2_dfm[49:40])
      , (regs_regs_4_lpi_2_dfm[49:40]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_3_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[59:50]) ,
      (regs_regs_1_lpi_2_dfm[59:50]) , (regs_regs_2_lpi_2_dfm[59:50]) , (regs_regs_3_lpi_2_dfm[59:50])
      , (regs_regs_4_lpi_2_dfm[59:50]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign nl_ACC1_acc_18_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_5_mux_nl)
      + conv_u2u_10_11(regs_operator_4_mux_nl)) + conv_u2u_10_12(regs_operator_3_mux_nl);
  assign ACC1_acc_18_psp_sva = nl_ACC1_acc_18_psp_sva[11:0];
  assign nl_acc_imod_4_sva = conv_s2s_2_3(conv_s2s_1_2(acc_5_psp_sva[1]) + conv_u2s_1_2(acc_5_psp_sva[0]))
      + conv_s2s_2_3(acc_5_psp_sva[3:2]);
  assign acc_imod_4_sva = nl_acc_imod_4_sva[2:0];
  assign nl_acc_5_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_18_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_18_psp_sva[4])
      , (ACC1_acc_18_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_18_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_18_psp_sva[6])
      , (~ (ACC1_acc_18_psp_sva[7]))})))) , (ACC1_acc_18_psp_sva[10])})))) , 1'b1})
      + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (ACC1_acc_18_psp_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(ACC1_acc_18_psp_sva[2]) , (~ (ACC1_acc_18_psp_sva[9]))}))))
      , (~ (ACC1_acc_18_psp_sva[11]))})))) + ({3'b101 , (ACC1_acc_18_psp_sva[0])});
  assign acc_5_psp_sva = nl_acc_5_psp_sva[3:0];
  assign regs_operator_14_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[129:120])
      , (regs_regs_1_lpi_2_dfm[129:120]) , (regs_regs_2_lpi_2_dfm[129:120]) , (regs_regs_3_lpi_2_dfm[129:120])
      , (regs_regs_4_lpi_2_dfm[129:120]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_13_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[139:130])
      , (regs_regs_1_lpi_2_dfm[139:130]) , (regs_regs_2_lpi_2_dfm[139:130]) , (regs_regs_3_lpi_2_dfm[139:130])
      , (regs_regs_4_lpi_2_dfm[139:130]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign regs_operator_12_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[149:140])
      , (regs_regs_1_lpi_2_dfm[149:140]) , (regs_regs_2_lpi_2_dfm[149:140]) , (regs_regs_3_lpi_2_dfm[149:140])
      , (regs_regs_4_lpi_2_dfm[149:140]) , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
  assign nl_ACC1_acc_21_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_14_mux_nl)
      + conv_u2u_10_11(regs_operator_13_mux_nl)) + conv_u2u_10_12(regs_operator_12_mux_nl);
  assign ACC1_acc_21_psp_sva = nl_ACC1_acc_21_psp_sva[11:0];
  assign nl_acc_imod_13_sva = conv_s2s_2_3(conv_s2s_1_2(acc_17_psp_sva[1]) + conv_u2s_1_2(acc_17_psp_sva[0]))
      + conv_s2s_2_3(acc_17_psp_sva[3:2]);
  assign acc_imod_13_sva = nl_acc_imod_13_sva[2:0];
  assign nl_acc_17_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_21_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_21_psp_sva[4])
      , (ACC1_acc_21_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (ACC1_acc_21_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_21_psp_sva[6])
      , (~ (ACC1_acc_21_psp_sva[7]))})))) , (ACC1_acc_21_psp_sva[10])})))) , 1'b1})
      + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (ACC1_acc_21_psp_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(ACC1_acc_21_psp_sva[2]) , (~ (ACC1_acc_21_psp_sva[9]))}))))
      , (~ (ACC1_acc_21_psp_sva[11]))})))) + ({3'b101 , (ACC1_acc_21_psp_sva[0])});
  assign acc_17_psp_sva = nl_acc_17_psp_sva[3:0];
  assign and_dcpl = ~((fsm_output[5]) | (fsm_output[1]));
  assign or_dcpl_6 = (SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]);
  assign or_dcpl_10 = (fsm_output[3]) | (fsm_output[2]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      regs_regs_3_lpi_2 <= 150'b0;
      regs_regs_2_lpi_2 <= 150'b0;
      regs_regs_1_lpi_2 <= 150'b0;
      regs_regs_0_lpi_2 <= 150'b0;
      SHIFT_i_1_sva_3 <= 2'b0;
      vout_rsc_mgc_out_stdreg_d <= 30'b0;
      grey_1_sva <= 21'b0;
      SHIFT_i_1_sva_2_sg1 <= 1'b0;
      regs_regs_4_lpi_2 <= 150'b0;
      regs_operator_din_sva <= 150'b0;
      i_2_sva <= 3'b0;
      regs_regs_4_lpi_2_dfm <= 150'b0;
      regs_regs_3_lpi_2_dfm <= 150'b0;
      regs_regs_2_lpi_2_dfm <= 150'b0;
      regs_regs_1_lpi_2_dfm <= 150'b0;
      regs_regs_0_lpi_2_dfm <= 150'b0;
      ACC1_slc_itm <= 1'b0;
      ACC1_acc_62_itm <= 17'b0;
      ACC1_acc_24_itm <= 12'b0;
      ACC1_acc_63_itm <= 17'b0;
      i_2_sva_1 <= 3'b0;
      grey_1_sva_1 <= 21'b0;
      regs_regs_0_sva <= 150'b0;
      regs_regs_2_sva <= 150'b0;
      regs_regs_1_sva <= 150'b0;
      regs_regs_3_sva <= 150'b0;
    end
    else begin
      if ( en ) begin
        regs_regs_3_lpi_2 <= MUX1HOT_v_150_3_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
            , regs_regs_3_lpi_2 , regs_regs_3_sva}, {((~ nand_1_tmp) & (fsm_output[1]))
            , ((nand_1_tmp & (fsm_output[1])) | and_dcpl) , (fsm_output[5])});
        regs_regs_2_lpi_2 <= MUX1HOT_v_150_3_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
            , regs_regs_2_lpi_2 , regs_regs_2_sva}, {((~ or_16_tmp) & (fsm_output[1]))
            , ((or_16_tmp & (fsm_output[1])) | and_dcpl) , (fsm_output[5])});
        regs_regs_1_lpi_2 <= MUX1HOT_v_150_3_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
            , regs_regs_1_lpi_2 , regs_regs_1_sva}, {((~ or_17_tmp) & (fsm_output[1]))
            , ((or_17_tmp & (fsm_output[1])) | and_dcpl) , (fsm_output[5])});
        regs_regs_0_lpi_2 <= MUX1HOT_v_150_3_2({regs_operator_din_sva , regs_regs_0_lpi_2
            , regs_regs_0_sva}, {((~ or_18_tmp) & (fsm_output[1])) , ((or_18_tmp
            & (fsm_output[1])) | and_dcpl) , (fsm_output[5])});
        SHIFT_i_1_sva_3 <= (z_out[1:0]) & (signext_2_1(fsm_output[1]));
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({vout_rsc_mgc_out_stdreg_d , (({((grey_1_sva_1[9:0])
            | (grey_1_sva_1[19:10])) , (grey_1_sva_1[9:0]) , 10'b0}) | ({9'b0 , grey_1_sva_1}))},
            fsm_output[4]);
        grey_1_sva <= (MUX_v_21_2_2({grey_1_sva_mx0w1 , grey_1_sva}, ~((fsm_output[3])
            | (fsm_output[0])))) & (signext_21_1(~ (fsm_output[0])));
        SHIFT_i_1_sva_2_sg1 <= ~ (fsm_output[1]);
        regs_regs_4_lpi_2 <= regs_regs_4_lpi_3;
        regs_operator_din_sva <= MUX_v_150_2_2({vin_rsc_mgc_in_wire_d , regs_operator_din_sva},
            fsm_output[1]);
        i_2_sva <= i_2_sva_1 & (signext_3_1(fsm_output[3]));
        regs_regs_4_lpi_2_dfm <= MUX_v_150_2_2({regs_regs_4_lpi_3 , regs_regs_4_lpi_2_dfm},
            or_dcpl_10);
        regs_regs_3_lpi_2_dfm <= MUX1HOT_v_150_3_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
            , regs_regs_3_lpi_2 , regs_regs_3_lpi_2_dfm}, {(~(nand_1_tmp | or_dcpl_10))
            , (nand_1_tmp & (~ or_dcpl_10)) , or_dcpl_10});
        regs_regs_2_lpi_2_dfm <= MUX1HOT_v_150_3_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
            , regs_regs_2_lpi_2 , regs_regs_2_lpi_2_dfm}, {(~(or_16_tmp | or_dcpl_10))
            , (or_16_tmp & (~ or_dcpl_10)) , or_dcpl_10});
        regs_regs_1_lpi_2_dfm <= MUX1HOT_v_150_3_2({SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva
            , regs_regs_1_lpi_2 , regs_regs_1_lpi_2_dfm}, {(~(or_17_tmp | or_dcpl_10))
            , (or_17_tmp & (~ or_dcpl_10)) , or_dcpl_10});
        regs_regs_0_lpi_2_dfm <= MUX1HOT_v_150_3_2({regs_operator_din_sva , regs_regs_0_lpi_2
            , regs_regs_0_lpi_2_dfm}, {(~(or_18_tmp | or_dcpl_10)) , (or_18_tmp &
            (~ or_dcpl_10)) , or_dcpl_10});
        ACC1_slc_itm <= readslicef_3_1_2(((z_out[2:0]) + 3'b11));
        ACC1_acc_62_itm <= nl_ACC1_acc_62_itm[16:0];
        ACC1_acc_24_itm <= nl_ACC1_acc_24_itm[11:0];
        ACC1_acc_63_itm <= nl_ACC1_acc_63_itm[16:0];
        i_2_sva_1 <= z_out[2:0];
        grey_1_sva_1 <= grey_1_sva_mx0w1;
        regs_regs_0_sva <= MUX_v_150_2_2({regs_regs_0_sva , regs_regs_0_lpi_2_dfm},
            fsm_output[3]);
        regs_regs_2_sva <= MUX_v_150_2_2({regs_regs_2_sva , regs_regs_2_lpi_2_dfm},
            fsm_output[3]);
        regs_regs_1_sva <= MUX_v_150_2_2({regs_regs_1_sva , regs_regs_1_lpi_2_dfm},
            fsm_output[3]);
        regs_regs_3_sva <= MUX_v_150_2_2({regs_regs_3_sva , regs_regs_3_lpi_2_dfm},
            fsm_output[3]);
      end
    end
  end
  assign nl_ACC1_acc_62_itm  = conv_u2u_16_17(signext_16_12(conv_u2s_10_12({(ACC1_acc_18_psp_sva[11])
      , (conv_u2u_8_9({(ACC1_acc_18_psp_sva[11]) , 1'b0 , (ACC1_acc_18_psp_sva[11])
      , 1'b0 , (ACC1_acc_18_psp_sva[11]) , 1'b0 , (signext_2_1(ACC1_acc_18_psp_sva[7]))})
      + conv_u2u_8_9(readslicef_9_8_1((({(ACC1_acc_18_psp_sva[9]) , 1'b0 , (ACC1_acc_18_psp_sva[9])
      , 1'b0 , (ACC1_acc_18_psp_sva[9]) , 1'b0 , (signext_2_1(ACC1_acc_18_psp_sva[5]))
      , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(ACC1_acc_18_psp_sva[7])
      , 1'b0 , (ACC1_acc_18_psp_sva[5]) , 1'b0 , (signext_2_1(ACC1_acc_18_psp_sva[9]))
      , 1'b1}) + conv_u2u_6_8({(ACC1_acc_18_psp_sva[6]) , 1'b0 , (ACC1_acc_18_psp_sva[6])
      , 1'b0 , (ACC1_acc_18_psp_sva[6]) , (acc_imod_4_sva[1])})))) , (~ (readslicef_3_1_2((({1'b1
      , (acc_imod_4_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_4_sva[1])) , (~
      (acc_imod_4_sva[2]))})))))})))))}) + conv_s2s_10_12(conv_u2s_9_10({(ACC1_acc_18_psp_sva[10])
      , 1'b0 , (ACC1_acc_18_psp_sva[10]) , 1'b0 , (ACC1_acc_18_psp_sva[10]) , 1'b0
      , (ACC1_acc_18_psp_sva[10]) , 1'b0 , (ACC1_acc_18_psp_sva[10])}) + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(ACC1_acc_18_psp_sva[8])
      , 1'b0 , (ACC1_acc_18_psp_sva[8]) , 1'b0 , (ACC1_acc_18_psp_sva[8]) , 1'b0
      , (ACC1_acc_18_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(ACC1_acc_18_psp_sva[3])
      , (ACC1_acc_18_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (ACC1_acc_18_psp_sva[2])
      , (ACC1_acc_18_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_5_psp_sva[3:2])
      , (ACC1_acc_18_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(ACC1_acc_18_psp_sva[7])
      , (ACC1_acc_18_psp_sva[4]) , (signext_2_1(ACC1_acc_18_psp_sva[11])) , (acc_5_psp_sva[1])}))))
      , (~ (acc_imod_4_sva[2]))}))))))) + conv_u2u_16_17(signext_16_12(conv_u2s_10_12({(ACC1_acc_21_psp_sva[11])
      , (conv_u2u_8_9({(ACC1_acc_21_psp_sva[11]) , 1'b0 , (ACC1_acc_21_psp_sva[11])
      , 1'b0 , (ACC1_acc_21_psp_sva[11]) , 1'b0 , (signext_2_1(ACC1_acc_21_psp_sva[7]))})
      + conv_u2u_8_9(readslicef_9_8_1((({(ACC1_acc_21_psp_sva[9]) , 1'b0 , (ACC1_acc_21_psp_sva[9])
      , 1'b0 , (ACC1_acc_21_psp_sva[9]) , 1'b0 , (signext_2_1(ACC1_acc_21_psp_sva[5]))
      , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(ACC1_acc_21_psp_sva[7])
      , 1'b0 , (ACC1_acc_21_psp_sva[5]) , 1'b0 , (signext_2_1(ACC1_acc_21_psp_sva[9]))
      , 1'b1}) + conv_u2u_6_8({(ACC1_acc_21_psp_sva[6]) , 1'b0 , (ACC1_acc_21_psp_sva[6])
      , 1'b0 , (ACC1_acc_21_psp_sva[6]) , (acc_imod_13_sva[1])})))) , (~ (readslicef_3_1_2((({1'b1
      , (acc_imod_13_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_13_sva[1])) ,
      (~ (acc_imod_13_sva[2]))})))))})))))}) + conv_s2s_10_12(conv_u2s_9_10({(ACC1_acc_21_psp_sva[10])
      , 1'b0 , (ACC1_acc_21_psp_sva[10]) , 1'b0 , (ACC1_acc_21_psp_sva[10]) , 1'b0
      , (ACC1_acc_21_psp_sva[10]) , 1'b0 , (ACC1_acc_21_psp_sva[10])}) + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(ACC1_acc_21_psp_sva[8])
      , 1'b0 , (ACC1_acc_21_psp_sva[8]) , 1'b0 , (ACC1_acc_21_psp_sva[8]) , 1'b0
      , (ACC1_acc_21_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(ACC1_acc_21_psp_sva[3])
      , (ACC1_acc_21_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (ACC1_acc_21_psp_sva[2])
      , (ACC1_acc_21_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_17_psp_sva[3:2])
      , (ACC1_acc_21_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(ACC1_acc_21_psp_sva[7])
      , (ACC1_acc_21_psp_sva[4]) , (signext_2_1(ACC1_acc_21_psp_sva[11])) , (acc_17_psp_sva[1])}))))
      , (~ (acc_imod_13_sva[2]))})))))));
  assign nl_ACC1_acc_24_itm  = conv_u2s_10_12({(ACC1_acc_19_psp_sva[11]) , (conv_u2u_8_9({(ACC1_acc_19_psp_sva[11])
      , 1'b0 , (ACC1_acc_19_psp_sva[11]) , 1'b0 , (ACC1_acc_19_psp_sva[11]) , 1'b0
      , (signext_2_1(ACC1_acc_19_psp_sva[7]))}) + conv_u2u_8_9(readslicef_9_8_1((({(ACC1_acc_19_psp_sva[9])
      , 1'b0 , (ACC1_acc_19_psp_sva[9]) , 1'b0 , (ACC1_acc_19_psp_sva[9]) , 1'b0
      , (signext_2_1(ACC1_acc_19_psp_sva[5])) , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(ACC1_acc_19_psp_sva[7])
      , 1'b0 , (ACC1_acc_19_psp_sva[5]) , 1'b0 , (signext_2_1(ACC1_acc_19_psp_sva[9]))
      , 1'b1}) + conv_u2u_6_8({(ACC1_acc_19_psp_sva[6]) , 1'b0 , (ACC1_acc_19_psp_sva[6])
      , 1'b0 , (ACC1_acc_19_psp_sva[6]) , (acc_imod_7_sva[1])})))) , (~ (readslicef_3_1_2((({1'b1
      , (acc_imod_7_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_7_sva[1])) , (~
      (acc_imod_7_sva[2]))})))))})))))}) + conv_s2s_10_12(conv_u2s_9_10({(ACC1_acc_19_psp_sva[10])
      , 1'b0 , (ACC1_acc_19_psp_sva[10]) , 1'b0 , (ACC1_acc_19_psp_sva[10]) , 1'b0
      , (ACC1_acc_19_psp_sva[10]) , 1'b0 , (ACC1_acc_19_psp_sva[10])}) + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(ACC1_acc_19_psp_sva[8])
      , 1'b0 , (ACC1_acc_19_psp_sva[8]) , 1'b0 , (ACC1_acc_19_psp_sva[8]) , 1'b0
      , (ACC1_acc_19_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(ACC1_acc_19_psp_sva[3])
      , (ACC1_acc_19_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (ACC1_acc_19_psp_sva[2])
      , (ACC1_acc_19_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_9_psp_sva[3:2])
      , (ACC1_acc_19_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(ACC1_acc_19_psp_sva[7])
      , (ACC1_acc_19_psp_sva[4]) , (signext_2_1(ACC1_acc_19_psp_sva[11])) , (acc_9_psp_sva[1])}))))
      , (~ (acc_imod_7_sva[2]))})))));
  assign nl_ACC1_acc_63_itm  = conv_u2u_16_17(signext_16_12(conv_u2s_10_12({(ACC1_acc_20_psp_sva[11])
      , (conv_u2u_8_9({(ACC1_acc_20_psp_sva[11]) , 1'b0 , (ACC1_acc_20_psp_sva[11])
      , 1'b0 , (ACC1_acc_20_psp_sva[11]) , 1'b0 , (signext_2_1(ACC1_acc_20_psp_sva[7]))})
      + conv_u2u_8_9(readslicef_9_8_1((({(ACC1_acc_20_psp_sva[9]) , 1'b0 , (ACC1_acc_20_psp_sva[9])
      , 1'b0 , (ACC1_acc_20_psp_sva[9]) , 1'b0 , (signext_2_1(ACC1_acc_20_psp_sva[5]))
      , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(ACC1_acc_20_psp_sva[7])
      , 1'b0 , (ACC1_acc_20_psp_sva[5]) , 1'b0 , (signext_2_1(ACC1_acc_20_psp_sva[9]))
      , 1'b1}) + conv_u2u_6_8({(ACC1_acc_20_psp_sva[6]) , 1'b0 , (ACC1_acc_20_psp_sva[6])
      , 1'b0 , (ACC1_acc_20_psp_sva[6]) , (z_out_1[1])})))) , (~ (readslicef_3_1_2((({1'b1
      , (z_out_1[0]) , 1'b1}) + conv_u2s_2_3({(~ (z_out_1[1])) , (~ (z_out_1[2]))})))))})))))})
      + conv_s2s_10_12(conv_u2s_9_10({(ACC1_acc_20_psp_sva[10]) , 1'b0 , (ACC1_acc_20_psp_sva[10])
      , 1'b0 , (ACC1_acc_20_psp_sva[10]) , 1'b0 , (ACC1_acc_20_psp_sva[10]) , 1'b0
      , (ACC1_acc_20_psp_sva[10])}) + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(ACC1_acc_20_psp_sva[8])
      , 1'b0 , (ACC1_acc_20_psp_sva[8]) , 1'b0 , (ACC1_acc_20_psp_sva[8]) , 1'b0
      , (ACC1_acc_20_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(ACC1_acc_20_psp_sva[3])
      , (ACC1_acc_20_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (ACC1_acc_20_psp_sva[2])
      , (ACC1_acc_20_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_13_psp_sva[3:2])
      , (ACC1_acc_20_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(ACC1_acc_20_psp_sva[7])
      , (ACC1_acc_20_psp_sva[4]) , (signext_2_1(ACC1_acc_20_psp_sva[11])) , (acc_13_psp_sva[1])}))))
      , (~ (z_out_1[2]))}))))))) + conv_u2u_16_17(signext_16_12(conv_u2s_10_12({(ACC1_acc_17_psp_sva[11])
      , (conv_u2u_8_9({(ACC1_acc_17_psp_sva[11]) , 1'b0 , (ACC1_acc_17_psp_sva[11])
      , 1'b0 , (ACC1_acc_17_psp_sva[11]) , 1'b0 , (signext_2_1(ACC1_acc_17_psp_sva[7]))})
      + conv_u2u_8_9(readslicef_9_8_1((({(ACC1_acc_17_psp_sva[9]) , 1'b0 , (ACC1_acc_17_psp_sva[9])
      , 1'b0 , (ACC1_acc_17_psp_sva[9]) , 1'b0 , (signext_2_1(ACC1_acc_17_psp_sva[5]))
      , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(ACC1_acc_17_psp_sva[7])
      , 1'b0 , (ACC1_acc_17_psp_sva[5]) , 1'b0 , (signext_2_1(ACC1_acc_17_psp_sva[9]))
      , 1'b1}) + conv_u2u_6_8({(ACC1_acc_17_psp_sva[6]) , 1'b0 , (ACC1_acc_17_psp_sva[6])
      , 1'b0 , (ACC1_acc_17_psp_sva[6]) , (acc_imod_1_sva[1])})))) , (~ (readslicef_3_1_2((({1'b1
      , (acc_imod_1_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_1_sva[1])) , (~
      (acc_imod_1_sva[2]))})))))})))))}) + conv_s2s_10_12(conv_u2s_9_10({(ACC1_acc_17_psp_sva[10])
      , 1'b0 , (ACC1_acc_17_psp_sva[10]) , 1'b0 , (ACC1_acc_17_psp_sva[10]) , 1'b0
      , (ACC1_acc_17_psp_sva[10]) , 1'b0 , (ACC1_acc_17_psp_sva[10])}) + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(ACC1_acc_17_psp_sva[8])
      , 1'b0 , (ACC1_acc_17_psp_sva[8]) , 1'b0 , (ACC1_acc_17_psp_sva[8]) , 1'b0
      , (ACC1_acc_17_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(ACC1_acc_17_psp_sva[3])
      , (ACC1_acc_17_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (ACC1_acc_17_psp_sva[2])
      , (ACC1_acc_17_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_1_psp_sva[3:2])
      , (ACC1_acc_17_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(ACC1_acc_17_psp_sva[7])
      , (ACC1_acc_17_psp_sva[4]) , (signext_2_1(ACC1_acc_17_psp_sva[11])) , (acc_1_psp_sva[1])}))))
      , (~ (acc_imod_1_sva[2]))})))))));
  assign mux_21_nl = MUX_v_3_2_2({({SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3}) , i_2_sva},
      fsm_output[2]);
  assign nl_z_out = conv_u2u_3_4(mux_21_nl) + conv_s2u_2_4({(fsm_output[1]) , 1'b1});
  assign z_out = nl_z_out[3:0];
  assign mux_20_nl = MUX_v_2_2_2({SHIFT_i_1_sva_3 , (conv_s2s_1_2(acc_13_psp_sva[1])
      + conv_u2s_1_2(acc_13_psp_sva[0]))}, fsm_output[2]);
  assign nl_z_out_1 = conv_s2u_2_3(mux_20_nl) + conv_s2u_2_3((acc_13_psp_sva[3:2])
      | (signext_2_1(fsm_output[1])));
  assign z_out_1 = nl_z_out_1[2:0];

  function [149:0] MUX_v_150_2_2;
    input [299:0] inputs;
    input [0:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[299:150];
      end
      1'b1 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[299:150];
      end
    endcase
    MUX_v_150_2_2 = result;
  end
  endfunction


  function [149:0] MUX_v_150_4_2;
    input [599:0] inputs;
    input [1:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[599:450];
      end
      2'b01 : begin
        result = inputs[449:300];
      end
      2'b10 : begin
        result = inputs[299:150];
      end
      2'b11 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[599:450];
      end
    endcase
    MUX_v_150_4_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_8_2;
    input [79:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[79:70];
      end
      3'b001 : begin
        result = inputs[69:60];
      end
      3'b010 : begin
        result = inputs[59:50];
      end
      3'b011 : begin
        result = inputs[49:40];
      end
      3'b100 : begin
        result = inputs[39:30];
      end
      3'b101 : begin
        result = inputs[29:20];
      end
      3'b110 : begin
        result = inputs[19:10];
      end
      3'b111 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[79:70];
      end
    endcase
    MUX_v_10_8_2 = result;
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [149:0] MUX1HOT_v_150_3_2;
    input [449:0] inputs;
    input [2:0] sel;
    reg [149:0] result;
    integer i;
  begin
    result = inputs[0+:150] & {150{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*150+:150] & {150{sel[i]}});
    MUX1HOT_v_150_3_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [20:0] MUX_v_21_2_2;
    input [41:0] inputs;
    input [0:0] sel;
    reg [20:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[41:21];
      end
      1'b1 : begin
        result = inputs[20:0];
      end
      default : begin
        result = inputs[41:21];
      end
    endcase
    MUX_v_21_2_2 = result;
  end
  endfunction


  function [20:0] signext_21_1;
    input [0:0] vector;
  begin
    signext_21_1= {{20{vector[0]}}, vector};
  end
  endfunction


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [15:0] signext_16_12;
    input [11:0] vector;
  begin
    signext_16_12= {{4{vector[11]}}, vector};
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function  [20:0] conv_u2u_19_21 ;
    input [18:0]  vector ;
  begin
    conv_u2u_19_21 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [18:0] conv_u2u_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_19 = {1'b0, vector};
  end
  endfunction


  function  [17:0] conv_u2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_18 = {1'b0, vector};
  end
  endfunction


  function  [17:0] conv_u2u_16_18 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_18 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [18:0] conv_u2u_17_19 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_19 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [16:0] conv_u2u_16_17 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_17 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_s2s_10_12 ;
    input signed [9:0]  vector ;
  begin
    conv_s2s_10_12 = {{2{vector[9]}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_8_10 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_10 = {{2{vector[7]}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function signed [4:0] conv_s2s_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [3:0] conv_s2u_2_4 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function  [2:0] conv_s2u_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_3 = {vector[1], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mean_vga
//  Generated from file(s):
//    7) $PROJECT_HOME/../../../../catapult_proj/vga_blur/blur.c
// ------------------------------------------------------------------


module mean_vga (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mean_vga_core mean_vga_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



