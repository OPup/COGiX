// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-004
//  Generated date: Fri Mar 11 15:36:05 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    mean_vga_core
// ------------------------------------------------------------------


module mean_vga_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [149:0] regs_regs_2_sva;
    reg [149:0] regs_regs_1_sva;
    reg [149:0] regs_regs_3_sva;
    reg [149:0] regs_regs_0_sva;
    reg [149:0] regs_regs_4_sva;
    reg [149:0] regs_regs_0_lpi_2;
    reg [149:0] regs_regs_2_lpi_2;
    reg [149:0] regs_regs_1_lpi_2;
    reg [149:0] regs_regs_3_lpi_2;
    reg [149:0] regs_regs_4_lpi_2;
    reg [2:0] j_1_sva;
    reg [15:0] grey_1_sva;
    reg [149:0] regs_operator_din_sva;
    reg [2:0] j_1_sva_1;
    reg unequal_tmp;
    reg [149:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva;
    reg [149:0] regs_regs_0_lpi_2_dfm;
    reg [149:0] regs_regs_1_lpi_2_dfm;
    reg [149:0] regs_regs_2_lpi_2_dfm;
    reg [149:0] regs_regs_3_lpi_2_dfm;
    reg [149:0] regs_regs_4_lpi_2_dfm;
    reg [2:0] i_2_sva;
    reg [11:0] ACC1_acc_21_psp_sva;
    reg [3:0] acc_1_psp_sva;
    reg [2:0] acc_imod_1_sva;
    reg [11:0] ACC1_acc_22_psp_sva;
    reg [3:0] acc_5_psp_sva;
    reg [2:0] acc_imod_4_sva;
    reg [11:0] ACC1_acc_23_psp_sva;
    reg [3:0] acc_9_psp_sva;
    reg [2:0] acc_imod_7_sva;
    reg [11:0] ACC1_acc_24_psp_sva;
    reg [3:0] acc_13_psp_sva;
    reg [2:0] acc_imod_10_sva;
    reg [11:0] ACC1_acc_25_psp_sva;
    reg [3:0] acc_17_psp_sva;
    reg [2:0] acc_imod_13_sva;
    reg [1:0] ACC1_acc_11_psp_sva;
    reg or_seb_sva;
    reg [15:0] grey_1_sva_1;
    reg [2:0] i_2_sva_1;
    reg [2:0] SHIFT_acc_1_psp;
    reg [11:0] ACC1_acc_28_itm;
    reg [15:0] ACC1_mul_2_itm;
    reg [2:0] ACC1_acc_47_itm;
    reg [2:0] ACC1_acc_44_itm;
    reg [2:0] ACC1_acc_41_itm;
    reg [7:0] ACC1_slc_65_itm;
    reg [2:0] ACC1_acc_38_itm;
    reg [9:0] ACC1_slc_64_itm;
    reg [11:0] ACC1_slc_63_itm;
    reg ACC1_slc_5_itm;
    reg ACC1_slc_itm;
    reg [8:0] ACC1_slc_61_itm_1;
    reg [10:0] ACC1_slc_53_itm_1;
    reg SHIFT_i_1_sva_2_sg1;
    reg [1:0] SHIFT_i_1_sva_3;

    reg[2:0] select_0;
    reg[9:0] regs_operator_2_mux_nl;
    reg[9:0] regs_operator_1_mux_nl;
    reg[9:0] regs_operator_mux_nl;
    reg[9:0] regs_operator_5_mux_nl;
    reg[9:0] regs_operator_4_mux_nl;
    reg[9:0] regs_operator_3_mux_nl;
    reg[9:0] regs_operator_8_mux_nl;
    reg[9:0] regs_operator_7_mux_nl;
    reg[9:0] regs_operator_6_mux_nl;
    reg[9:0] regs_operator_11_mux_nl;
    reg[9:0] regs_operator_10_mux_nl;
    reg[9:0] regs_operator_9_mux_nl;
    reg[9:0] regs_operator_14_mux_nl;
    reg[9:0] regs_operator_13_mux_nl;
    reg[9:0] regs_operator_12_mux_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        regs_regs_2_sva = 150'b0;
        regs_regs_1_sva = 150'b0;
        regs_regs_3_sva = 150'b0;
        regs_regs_0_sva = 150'b0;
        regs_regs_4_sva = 150'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            regs_regs_4_lpi_2 = regs_regs_4_sva;
            regs_regs_3_lpi_2 = regs_regs_3_sva;
            regs_regs_1_lpi_2 = regs_regs_1_sva;
            regs_regs_2_lpi_2 = regs_regs_2_sva;
            regs_regs_0_lpi_2 = regs_regs_0_sva;
            j_1_sva = 3'b0;
            grey_1_sva = 16'b0;
            SHIFT_i_1_sva_3 = 2'b0;
            SHIFT_i_1_sva_2_sg1 = 1'b1;
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            regs_operator_din_sva = vin_rsc_mgc_in_wire_d;
            begin : for_0Exit
              forever begin : for_0
                // C-Step 0 of Loop 'for_0'
                begin : waitLoop1Exit
                  forever begin : waitLoop1
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop1Exit;
                  end
                end
                // C-Step 1 of Loop 'for_0'
                SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 150'b0;
                j_1_sva_1 = j_1_sva + 3'b1;
                unequal_tmp = SHIFT_i_1_sva_2_sg1 | (SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]);
                select_0 = {SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3};
                case (select_0)
                  3'b0 : begin
                    // NOP
                  end
                  default : begin
                    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = MUX_v_150_4_2({regs_regs_0_lpi_2
                        , regs_regs_1_lpi_2 , regs_regs_2_lpi_2 , regs_regs_3_lpi_2},
                        SHIFT_i_1_sva_3 + 2'b11);
                  end
                endcase
                regs_regs_0_lpi_2_dfm = MUX_v_150_2_2({regs_operator_din_sva , regs_regs_0_lpi_2},
                    unequal_tmp);
                regs_regs_1_lpi_2_dfm = MUX_v_150_2_2({regs_regs_1_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (~ (SHIFT_i_1_sva_3[1])) & (SHIFT_i_1_sva_3[0]) & unequal_tmp);
                regs_regs_2_lpi_2_dfm = MUX_v_150_2_2({regs_regs_2_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (SHIFT_i_1_sva_3[1]) & (~ (SHIFT_i_1_sva_3[0])) & unequal_tmp);
                regs_regs_3_lpi_2_dfm = MUX_v_150_2_2({regs_regs_3_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (SHIFT_i_1_sva_3[1]) & (SHIFT_i_1_sva_3[0]) & unequal_tmp);
                regs_regs_4_lpi_2_dfm = MUX_v_150_2_2({regs_regs_4_lpi_2 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                    (~((SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]))) & unequal_tmp);
                SHIFT_acc_1_psp = ({SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3}) + 3'b111;
                if ( (~ (readslicef_4_1_3((conv_u2s_3_4(j_1_sva_1) + 4'b1011))))
                    & (SHIFT_acc_1_psp[2]) )
                  disable for_0Exit;
                regs_regs_0_lpi_2 = regs_regs_0_lpi_2_dfm;
                regs_regs_1_lpi_2 = regs_regs_1_lpi_2_dfm;
                regs_regs_2_lpi_2 = regs_regs_2_lpi_2_dfm;
                regs_regs_3_lpi_2 = regs_regs_3_lpi_2_dfm;
                regs_regs_4_lpi_2 = regs_regs_4_lpi_2_dfm;
                j_1_sva = j_1_sva_1;
                SHIFT_i_1_sva_3 = SHIFT_acc_1_psp[1:0];
                SHIFT_i_1_sva_2_sg1 = 1'b0;
              end
            end
            i_2_sva = 3'b0;
            begin : ACC1Exit
              forever begin : ACC1
                // C-Step 0 of Loop 'ACC1'
                begin : waitLoop2Exit
                  forever begin : waitLoop2
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop2Exit;
                  end
                end
                // C-Step 1 of Loop 'ACC1'
                regs_operator_2_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[9:0])
                    , (regs_regs_1_lpi_2_dfm[9:0]) , (regs_regs_2_lpi_2_dfm[9:0])
                    , (regs_regs_3_lpi_2_dfm[9:0]) , (regs_regs_4_lpi_2_dfm[9:0])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_1_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[19:10])
                    , (regs_regs_1_lpi_2_dfm[19:10]) , (regs_regs_2_lpi_2_dfm[19:10])
                    , (regs_regs_3_lpi_2_dfm[19:10]) , (regs_regs_4_lpi_2_dfm[19:10])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[29:20])
                    , (regs_regs_1_lpi_2_dfm[29:20]) , (regs_regs_2_lpi_2_dfm[29:20])
                    , (regs_regs_3_lpi_2_dfm[29:20]) , (regs_regs_4_lpi_2_dfm[29:20])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                ACC1_acc_21_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_2_mux_nl)
                    + conv_u2u_10_11(regs_operator_1_mux_nl)) + conv_u2u_10_12(regs_operator_mux_nl);
                acc_1_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_21_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_21_psp_sva[4])
                    , (ACC1_acc_21_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_21_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_21_psp_sva[6])
                    , (~ (ACC1_acc_21_psp_sva[7]))})))) , (ACC1_acc_21_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_21_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_21_psp_sva[2])
                    , (~ (ACC1_acc_21_psp_sva[9]))})))) , (~ (ACC1_acc_21_psp_sva[11]))}))))
                    + ({3'b101 , (ACC1_acc_21_psp_sva[0])});
                acc_imod_1_sva = conv_s2s_2_3(conv_s2s_1_2(acc_1_psp_sva[1]) + conv_u2s_1_2(acc_1_psp_sva[0]))
                    + conv_s2s_2_3(acc_1_psp_sva[3:2]);
                regs_operator_5_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[39:30])
                    , (regs_regs_1_lpi_2_dfm[39:30]) , (regs_regs_2_lpi_2_dfm[39:30])
                    , (regs_regs_3_lpi_2_dfm[39:30]) , (regs_regs_4_lpi_2_dfm[39:30])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_4_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[49:40])
                    , (regs_regs_1_lpi_2_dfm[49:40]) , (regs_regs_2_lpi_2_dfm[49:40])
                    , (regs_regs_3_lpi_2_dfm[49:40]) , (regs_regs_4_lpi_2_dfm[49:40])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_3_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[59:50])
                    , (regs_regs_1_lpi_2_dfm[59:50]) , (regs_regs_2_lpi_2_dfm[59:50])
                    , (regs_regs_3_lpi_2_dfm[59:50]) , (regs_regs_4_lpi_2_dfm[59:50])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                ACC1_acc_22_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_5_mux_nl)
                    + conv_u2u_10_11(regs_operator_4_mux_nl)) + conv_u2u_10_12(regs_operator_3_mux_nl);
                acc_5_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_22_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_22_psp_sva[4])
                    , (ACC1_acc_22_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_22_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_22_psp_sva[6])
                    , (~ (ACC1_acc_22_psp_sva[7]))})))) , (ACC1_acc_22_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_22_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_22_psp_sva[2])
                    , (~ (ACC1_acc_22_psp_sva[9]))})))) , (~ (ACC1_acc_22_psp_sva[11]))}))))
                    + ({3'b101 , (ACC1_acc_22_psp_sva[0])});
                acc_imod_4_sva = conv_s2s_2_3(conv_s2s_1_2(acc_5_psp_sva[1]) + conv_u2s_1_2(acc_5_psp_sva[0]))
                    + conv_s2s_2_3(acc_5_psp_sva[3:2]);
                regs_operator_8_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[69:60])
                    , (regs_regs_1_lpi_2_dfm[69:60]) , (regs_regs_2_lpi_2_dfm[69:60])
                    , (regs_regs_3_lpi_2_dfm[69:60]) , (regs_regs_4_lpi_2_dfm[69:60])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_7_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[79:70])
                    , (regs_regs_1_lpi_2_dfm[79:70]) , (regs_regs_2_lpi_2_dfm[79:70])
                    , (regs_regs_3_lpi_2_dfm[79:70]) , (regs_regs_4_lpi_2_dfm[79:70])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_6_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[89:80])
                    , (regs_regs_1_lpi_2_dfm[89:80]) , (regs_regs_2_lpi_2_dfm[89:80])
                    , (regs_regs_3_lpi_2_dfm[89:80]) , (regs_regs_4_lpi_2_dfm[89:80])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                ACC1_acc_23_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_8_mux_nl)
                    + conv_u2u_10_11(regs_operator_7_mux_nl)) + conv_u2u_10_12(regs_operator_6_mux_nl);
                acc_9_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_23_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_23_psp_sva[4])
                    , (ACC1_acc_23_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_23_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_23_psp_sva[6])
                    , (~ (ACC1_acc_23_psp_sva[7]))})))) , (ACC1_acc_23_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_23_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_23_psp_sva[2])
                    , (~ (ACC1_acc_23_psp_sva[9]))})))) , (~ (ACC1_acc_23_psp_sva[11]))}))))
                    + ({3'b101 , (ACC1_acc_23_psp_sva[0])});
                acc_imod_7_sva = conv_s2s_2_3(conv_s2s_1_2(acc_9_psp_sva[1]) + conv_u2s_1_2(acc_9_psp_sva[0]))
                    + conv_s2s_2_3(acc_9_psp_sva[3:2]);
                regs_operator_11_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[99:90])
                    , (regs_regs_1_lpi_2_dfm[99:90]) , (regs_regs_2_lpi_2_dfm[99:90])
                    , (regs_regs_3_lpi_2_dfm[99:90]) , (regs_regs_4_lpi_2_dfm[99:90])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_10_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[109:100])
                    , (regs_regs_1_lpi_2_dfm[109:100]) , (regs_regs_2_lpi_2_dfm[109:100])
                    , (regs_regs_3_lpi_2_dfm[109:100]) , (regs_regs_4_lpi_2_dfm[109:100])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_9_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[119:110])
                    , (regs_regs_1_lpi_2_dfm[119:110]) , (regs_regs_2_lpi_2_dfm[119:110])
                    , (regs_regs_3_lpi_2_dfm[119:110]) , (regs_regs_4_lpi_2_dfm[119:110])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                ACC1_acc_24_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_11_mux_nl)
                    + conv_u2u_10_11(regs_operator_10_mux_nl)) + conv_u2u_10_12(regs_operator_9_mux_nl);
                acc_13_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_24_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_24_psp_sva[4])
                    , (ACC1_acc_24_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_24_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_24_psp_sva[6])
                    , (~ (ACC1_acc_24_psp_sva[7]))})))) , (ACC1_acc_24_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_24_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_24_psp_sva[2])
                    , (~ (ACC1_acc_24_psp_sva[9]))})))) , (~ (ACC1_acc_24_psp_sva[11]))}))))
                    + ({3'b101 , (ACC1_acc_24_psp_sva[0])});
                acc_imod_10_sva = conv_s2s_2_3(conv_s2s_1_2(acc_13_psp_sva[1]) +
                    conv_u2s_1_2(acc_13_psp_sva[0])) + conv_s2s_2_3(acc_13_psp_sva[3:2]);
                regs_operator_14_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[129:120])
                    , (regs_regs_1_lpi_2_dfm[129:120]) , (regs_regs_2_lpi_2_dfm[129:120])
                    , (regs_regs_3_lpi_2_dfm[129:120]) , (regs_regs_4_lpi_2_dfm[129:120])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_13_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[139:130])
                    , (regs_regs_1_lpi_2_dfm[139:130]) , (regs_regs_2_lpi_2_dfm[139:130])
                    , (regs_regs_3_lpi_2_dfm[139:130]) , (regs_regs_4_lpi_2_dfm[139:130])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                regs_operator_12_mux_nl = MUX_v_10_8_2({(regs_regs_0_lpi_2_dfm[149:140])
                    , (regs_regs_1_lpi_2_dfm[149:140]) , (regs_regs_2_lpi_2_dfm[149:140])
                    , (regs_regs_3_lpi_2_dfm[149:140]) , (regs_regs_4_lpi_2_dfm[149:140])
                    , 10'b0 , 10'b0 , 10'b0}, i_2_sva);
                ACC1_acc_25_psp_sva = conv_u2u_11_12(conv_u2u_10_11(regs_operator_14_mux_nl)
                    + conv_u2u_10_11(regs_operator_13_mux_nl)) + conv_u2u_10_12(regs_operator_12_mux_nl);
                acc_17_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_25_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_25_psp_sva[4])
                    , (ACC1_acc_25_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_25_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_25_psp_sva[6])
                    , (~ (ACC1_acc_25_psp_sva[7]))})))) , (ACC1_acc_25_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_25_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(ACC1_acc_25_psp_sva[2])
                    , (~ (ACC1_acc_25_psp_sva[9]))})))) , (~ (ACC1_acc_25_psp_sva[11]))}))))
                    + ({3'b101 , (ACC1_acc_25_psp_sva[0])});
                acc_imod_13_sva = conv_s2s_2_3(conv_s2s_1_2(acc_17_psp_sva[1]) +
                    conv_u2s_1_2(acc_17_psp_sva[0])) + conv_s2s_2_3(acc_17_psp_sva[3:2]);
                ACC1_acc_11_psp_sva = (i_2_sva[2:1]) + 2'b1;
                or_seb_sva = ((ACC1_acc_11_psp_sva[0]) & (~((ACC1_acc_11_psp_sva[1])
                    | (i_2_sva[0])))) | ((ACC1_acc_11_psp_sva[0]) & (i_2_sva[0])
                    & (~ (ACC1_acc_11_psp_sva[1]))) | ((ACC1_acc_11_psp_sva[1]) &
                    (i_2_sva[0]) & (~ (ACC1_acc_11_psp_sva[0]))) | ((ACC1_acc_11_psp_sva[1])
                    & (ACC1_acc_11_psp_sva[0]) & (~ (i_2_sva[0])));
                ACC1_acc_28_itm = conv_u2s_10_12({(ACC1_acc_23_psp_sva[11]) , (conv_u2u_8_9({(ACC1_acc_23_psp_sva[11])
                    , 1'b0 , (ACC1_acc_23_psp_sva[11]) , 1'b0 , (ACC1_acc_23_psp_sva[11])
                    , 1'b0 , (signext_2_1(ACC1_acc_23_psp_sva[7]))}) + conv_u2u_8_9(readslicef_9_8_1((({(ACC1_acc_23_psp_sva[9])
                    , 1'b0 , (ACC1_acc_23_psp_sva[9]) , 1'b0 , (ACC1_acc_23_psp_sva[9])
                    , 1'b0 , (signext_2_1(ACC1_acc_23_psp_sva[5])) , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(ACC1_acc_23_psp_sva[7])
                    , 1'b0 , (ACC1_acc_23_psp_sva[5]) , 1'b0 , (signext_2_1(ACC1_acc_23_psp_sva[9]))
                    , 1'b1}) + conv_u2u_6_8({(ACC1_acc_23_psp_sva[6]) , 1'b0 , (ACC1_acc_23_psp_sva[6])
                    , 1'b0 , (ACC1_acc_23_psp_sva[6]) , (acc_imod_7_sva[1])}))))
                    , (~ (readslicef_3_1_2((({1'b1 , (acc_imod_7_sva[0]) , 1'b1})
                    + conv_u2s_2_3({(~ (acc_imod_7_sva[1])) , (~ (acc_imod_7_sva[2]))})))))})))))})
                    + conv_s2s_10_12(conv_u2s_9_10({(ACC1_acc_23_psp_sva[10]) , 1'b0
                    , (ACC1_acc_23_psp_sva[10]) , 1'b0 , (ACC1_acc_23_psp_sva[10])
                    , 1'b0 , (ACC1_acc_23_psp_sva[10]) , 1'b0 , (ACC1_acc_23_psp_sva[10])})
                    + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(ACC1_acc_23_psp_sva[8])
                    , 1'b0 , (ACC1_acc_23_psp_sva[8]) , 1'b0 , (ACC1_acc_23_psp_sva[8])
                    , 1'b0 , (ACC1_acc_23_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(ACC1_acc_23_psp_sva[3])
                    , (ACC1_acc_23_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (ACC1_acc_23_psp_sva[2])
                    , (ACC1_acc_23_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_9_psp_sva[3:2])
                    , (ACC1_acc_23_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(ACC1_acc_23_psp_sva[7])
                    , (ACC1_acc_23_psp_sva[4]) , (signext_2_1(ACC1_acc_23_psp_sva[11]))
                    , (acc_9_psp_sva[1])})))) , (~ (acc_imod_7_sva[2]))})))));
                ACC1_acc_47_itm = conv_u2u_2_3((conv_u2u_1_2(ACC1_acc_21_psp_sva[11])
                    + conv_u2u_1_2(ACC1_acc_22_psp_sva[11])) + conv_u2u_1_2(ACC1_acc_24_psp_sva[11]))
                    + conv_u2u_1_3(ACC1_acc_25_psp_sva[11]);
                ACC1_slc_61_itm_1 = readslicef_10_9_1((conv_u2s_9_10({6'b101000 ,
                    (signext_2_1(~ (ACC1_acc_24_psp_sva[11]))) , 1'b1}) + ({(readslicef_10_9_1((conv_s2s_9_10({conv_s2u_16_8(conv_u2s_3_8(conv_u2u_2_3((conv_u2u_1_2(ACC1_acc_21_psp_sva[6])
                    + conv_u2u_1_2(ACC1_acc_22_psp_sva[6])) + conv_u2u_1_2(ACC1_acc_24_psp_sva[6]))
                    + conv_u2u_1_3(ACC1_acc_25_psp_sva[6])) * 8'b11101011) , 1'b1})
                    + conv_u2s_8_10({(readslicef_3_2_1((conv_u2u_2_3({(~ (ACC1_acc_22_psp_sva[7]))
                    , 1'b1}) + conv_u2u_2_3({(~ (ACC1_acc_24_psp_sva[7])) , 1'b1}))))
                    , (readslicef_6_5_1((({1'b1 , (~ (ACC1_acc_21_psp_sva[7])) ,
                    (~ (ACC1_acc_24_psp_sva[4])) , (signext_2_1(~ (ACC1_acc_22_psp_sva[5])))
                    , 1'b1}) + ({1'b1 , (~ (ACC1_acc_22_psp_sva[5])) , (~ (ACC1_acc_25_psp_sva[3]))
                    , (signext_2_1(~ (ACC1_acc_22_psp_sva[7]))) , (~ (ACC1_acc_24_psp_sva[4]))}))))
                    , (acc_imod_10_sva[2])})))) , (~ (ACC1_acc_25_psp_sva[1]))})));
                ACC1_acc_44_itm = conv_u2u_2_3((conv_u2u_1_2(ACC1_acc_21_psp_sva[9])
                    + conv_u2u_1_2(ACC1_acc_22_psp_sva[9])) + conv_u2u_1_2(ACC1_acc_24_psp_sva[9]))
                    + conv_u2u_1_3(ACC1_acc_25_psp_sva[9]);
                ACC1_acc_41_itm = conv_u2u_2_3((conv_u2u_1_2(ACC1_acc_21_psp_sva[10])
                    + conv_u2u_1_2(ACC1_acc_22_psp_sva[10])) + conv_u2u_1_2(ACC1_acc_24_psp_sva[10]))
                    + conv_u2u_1_3(ACC1_acc_25_psp_sva[10]);
                ACC1_slc_65_itm = readslicef_9_8_1((({(readslicef_9_8_1((conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(~
                    (ACC1_acc_25_psp_sva[7])) , 1'b1 , (~ (ACC1_acc_22_psp_sva[7]))
                    , (~ (ACC1_acc_25_psp_sva[4])) , (signext_2_1(~ (ACC1_acc_22_psp_sva[9])))
                    , 1'b1}) + conv_s2u_6_8({(readslicef_6_5_1((conv_s2s_5_6({(readslicef_5_4_1((conv_u2s_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~
                    (ACC1_acc_21_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(~ (ACC1_acc_21_psp_sva[2]))
                    , (~ (ACC1_acc_21_psp_sva[4]))})))) , 1'b1}) + conv_s2s_3_5({(~
                    (acc_1_psp_sva[3:2])) , (ACC1_acc_22_psp_sva[3])})))) , 1'b1})
                    + conv_s2s_5_6({(readslicef_5_4_1((conv_u2s_3_5(signext_3_2({(~
                    (ACC1_acc_24_psp_sva[9])) , 1'b1})) + conv_s2s_3_5({(~ (acc_17_psp_sva[3:2]))
                    , (readslicef_3_1_2((({1'b1 , (acc_imod_1_sva[0]) , 1'b1}) +
                    conv_u2s_2_3({(~ (acc_imod_1_sva[1])) , (~ (acc_imod_1_sva[2]))}))))}))))
                    , (readslicef_3_1_2((({1'b1 , (acc_imod_4_sva[0]) , 1'b1}) +
                    conv_u2s_2_3({(~ (acc_imod_4_sva[1])) , (~ (acc_imod_4_sva[2]))}))))}))))
                    , (ACC1_acc_24_psp_sva[3])})))) , 1'b1}) + conv_u2u_7_9({(readslicef_7_6_1((conv_u2u_6_7({(readslicef_6_5_1((conv_u2u_5_6({(~
                    (ACC1_acc_24_psp_sva[5])) , (~ (ACC1_acc_21_psp_sva[3])) , (signext_2_1(~
                    (ACC1_acc_21_psp_sva[11]))) , 1'b1}) + conv_u2u_5_6({(~ (ACC1_acc_24_psp_sva[7]))
                    , (~ (ACC1_acc_21_psp_sva[4])) , (signext_2_1(~ (ACC1_acc_21_psp_sva[5])))
                    , (acc_imod_4_sva[2])})))) , 1'b1}) + conv_u2u_6_7({(readslicef_6_5_1((conv_u2u_5_6({(~
                    (ACC1_acc_25_psp_sva[5])) , (~ (ACC1_acc_22_psp_sva[3])) , (signext_2_1(~
                    (ACC1_acc_21_psp_sva[7]))) , 1'b1}) + conv_u2u_5_6({(~ (ACC1_acc_25_psp_sva[7]))
                    , (~ (ACC1_acc_22_psp_sva[4])) , (signext_2_1(~ (ACC1_acc_21_psp_sva[9])))
                    , (~ (acc_imod_4_sva[1]))})))) , (~ (ACC1_acc_24_psp_sva[2]))}))))
                    , (~ (acc_imod_10_sva[1]))})))) , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_s2u_7_8({(readslicef_7_6_1((conv_s2s_6_7({(readslicef_6_5_1((conv_s2s_4_6({(readslicef_4_3_1((conv_s2s_3_4({(~
                    (acc_5_psp_sva[3:2])) , 1'b1}) + conv_s2s_3_4({(~ (acc_13_psp_sva[3:2]))
                    , (~ (ACC1_acc_22_psp_sva[2]))})))) , 1'b1}) + conv_u2s_4_6({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(~
                    (ACC1_acc_24_psp_sva[5])) , 1'b1})) + conv_u2u_3_4(signext_3_2({(~
                    (ACC1_acc_24_psp_sva[7])) , (~ (ACC1_acc_22_psp_sva[1]))})))))
                    , (~ (acc_5_psp_sva[1]))})))) , 1'b1}) + conv_u2s_5_7({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(~
                    (ACC1_acc_25_psp_sva[11])) , 1'b1})) + conv_u2u_3_4(signext_3_2({(~
                    (ACC1_acc_25_psp_sva[5])) , (~ (acc_imod_1_sva[1]))}))))) , 1'b1})
                    + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(~
                    (ACC1_acc_25_psp_sva[7])) , 1'b1})) + conv_u2u_3_4(signext_3_2({(~
                    (ACC1_acc_25_psp_sva[9])) , (~ (acc_1_psp_sva[1]))}))))) , (~
                    (ACC1_acc_22_psp_sva[4]))})))) , (~ (ACC1_acc_24_psp_sva[1]))}))))
                    , 1'b1}) + conv_u2u_7_8({(~ (ACC1_acc_21_psp_sva[7])) , 1'b1
                    , (~ (ACC1_acc_21_psp_sva[5])) , (~ (ACC1_acc_24_psp_sva[3]))
                    , (signext_2_1(~ (ACC1_acc_22_psp_sva[11]))) , (~ (acc_13_psp_sva[1]))}))))
                    , (readslicef_3_1_2((({1'b1 , (acc_imod_10_sva[0]) , 1'b1}) +
                    conv_u2s_2_3({(~ (acc_imod_10_sva[1])) , (~ (acc_imod_10_sva[2]))}))))})));
                ACC1_acc_38_itm = conv_u2u_2_3((conv_u2u_1_2(ACC1_acc_21_psp_sva[8])
                    + conv_u2u_1_2(ACC1_acc_22_psp_sva[8])) + conv_u2u_1_2(ACC1_acc_24_psp_sva[8]))
                    + conv_u2u_1_3(ACC1_acc_25_psp_sva[8]);
                ACC1_slc_5_itm = readslicef_3_1_2((({1'b1 , (acc_imod_13_sva[0])
                    , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_13_sva[1])) , (~ (acc_imod_13_sva[2]))})));
                i_2_sva_1 = i_2_sva + 3'b1;
                ACC1_slc_itm = readslicef_4_1_3((conv_u2s_3_4(i_2_sva_1) + 4'b1011));
                begin : waitLoop3Exit
                  forever begin : waitLoop3
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop3Exit;
                  end
                end
                // C-Step 2 of Loop 'ACC1'
                ACC1_mul_2_itm = conv_u2u_32_16(conv_s2s_12_16(ACC1_acc_28_itm) *
                    conv_s2s_6_16({or_seb_sva , 2'b11 , ({{2{or_seb_sva}}, or_seb_sva})}));
                begin : waitLoop4Exit
                  forever begin : waitLoop4
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop4Exit;
                  end
                end
                // C-Step 3 of Loop 'ACC1'
                ACC1_slc_64_itm = readslicef_11_10_1((conv_u2s_9_11({ACC1_slc_65_itm
                    , 1'b1}) + ({conv_s2u_20_10(conv_u2s_3_10(ACC1_acc_38_itm) *
                    10'b1110101011) , (~ (ACC1_acc_25_psp_sva[2]))})));
                begin : waitLoop5Exit
                  forever begin : waitLoop5
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop5Exit;
                  end
                end
                // C-Step 4 of Loop 'ACC1'
                ACC1_slc_53_itm_1 = readslicef_12_11_1((conv_s2s_11_12({1'b1 , ACC1_slc_61_itm_1
                    , 1'b1}) + ({conv_s2u_16_8(conv_u2s_3_8(ACC1_acc_44_itm) * 8'b11101011)
                    , 2'b0 , (ACC1_acc_21_psp_sva[3]) , (ACC1_acc_25_psp_sva[3])})));
                begin : waitLoop6Exit
                  forever begin : waitLoop6
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop6Exit;
                  end
                end
                // C-Step 5 of Loop 'ACC1'
                ACC1_slc_63_itm = readslicef_13_12_1((({conv_s2u_24_12(conv_u2s_3_12(ACC1_acc_41_itm)
                    * 12'b111010101011) , 1'b1}) + conv_s2s_11_13({ACC1_slc_64_itm
                    , (~ (ACC1_acc_25_psp_sva[4]))})));
                begin : waitLoop7Exit
                  forever begin : waitLoop7
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop7Exit;
                  end
                end
                // C-Step 6 of Loop 'ACC1'
                grey_1_sva_1 = readslicef_17_16_1((({(readslicef_17_16_1((({ACC1_mul_2_itm
                    , 1'b1}) + conv_s2s_15_17({(readslicef_15_14_1((conv_s2s_14_15({(readslicef_14_13_1((({conv_s2u_20_10(conv_u2s_3_10(ACC1_acc_47_itm)
                    * 10'b1110101011) , 2'b0 , (acc_imod_1_sva[2]) , 1'b1}) + conv_s2s_13_14({1'b1
                    , ACC1_slc_53_itm_1 , (~ (acc_17_psp_sva[1]))})))) , 1'b1}) +
                    conv_s2s_13_15({ACC1_slc_63_itm , (~ (acc_imod_13_sva[1]))}))))
                    , (acc_imod_13_sva[2])})))) , 1'b1}) + ({grey_1_sva , ACC1_slc_5_itm})));
                if ( ~ ACC1_slc_itm )
                  disable ACC1Exit;
                grey_1_sva = grey_1_sva_1;
                i_2_sva = i_2_sva_1;
              end
            end
            regs_regs_0_sva = regs_regs_0_lpi_2_dfm;
            regs_regs_1_sva = regs_regs_1_lpi_2_dfm;
            regs_regs_2_sva = regs_regs_2_lpi_2_dfm;
            regs_regs_3_sva = regs_regs_3_lpi_2_dfm;
            regs_regs_4_sva = regs_regs_4_lpi_2_dfm;
            begin : waitLoop8Exit
              forever begin : waitLoop8
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop8Exit;
              end
            end
            // C-Step 2 of Loop 'main'
            vout_rsc_mgc_out_stdreg_d <= {((grey_1_sva_1[9:0]) | ({4'b0, grey_1_sva_1[15:10]}))
                , (grey_1_sva_1[9:6]) , ((grey_1_sva_1[5:0]) | (grey_1_sva_1[15:10]))
                , (grey_1_sva_1[9:0])};
            begin : waitLoop9Exit
              forever begin : waitLoop9
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop9Exit;
              end
            end
            // C-Step 3 of Loop 'main'
          end
        end
      end
    end
    SHIFT_i_1_sva_3 = 2'b0;
    SHIFT_i_1_sva_2_sg1 = 1'b0;
    ACC1_slc_53_itm_1 = 11'b0;
    ACC1_slc_61_itm_1 = 9'b0;
    ACC1_slc_itm = 1'b0;
    ACC1_slc_5_itm = 1'b0;
    ACC1_slc_63_itm = 12'b0;
    ACC1_slc_64_itm = 10'b0;
    ACC1_acc_38_itm = 3'b0;
    ACC1_slc_65_itm = 8'b0;
    ACC1_acc_41_itm = 3'b0;
    ACC1_acc_44_itm = 3'b0;
    ACC1_acc_47_itm = 3'b0;
    ACC1_mul_2_itm = 16'b0;
    ACC1_acc_28_itm = 12'b0;
    SHIFT_acc_1_psp = 3'b0;
    i_2_sva_1 = 3'b0;
    grey_1_sva_1 = 16'b0;
    or_seb_sva = 1'b0;
    ACC1_acc_11_psp_sva = 2'b0;
    acc_imod_13_sva = 3'b0;
    acc_17_psp_sva = 4'b0;
    ACC1_acc_25_psp_sva = 12'b0;
    acc_imod_10_sva = 3'b0;
    acc_13_psp_sva = 4'b0;
    ACC1_acc_24_psp_sva = 12'b0;
    acc_imod_7_sva = 3'b0;
    acc_9_psp_sva = 4'b0;
    ACC1_acc_23_psp_sva = 12'b0;
    acc_imod_4_sva = 3'b0;
    acc_5_psp_sva = 4'b0;
    ACC1_acc_22_psp_sva = 12'b0;
    acc_imod_1_sva = 3'b0;
    acc_1_psp_sva = 4'b0;
    ACC1_acc_21_psp_sva = 12'b0;
    i_2_sva = 3'b0;
    regs_regs_4_lpi_2_dfm = 150'b0;
    regs_regs_3_lpi_2_dfm = 150'b0;
    regs_regs_2_lpi_2_dfm = 150'b0;
    regs_regs_1_lpi_2_dfm = 150'b0;
    regs_regs_0_lpi_2_dfm = 150'b0;
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 150'b0;
    unequal_tmp = 1'b0;
    j_1_sva_1 = 3'b0;
    regs_operator_din_sva = 150'b0;
    grey_1_sva = 16'b0;
    j_1_sva = 3'b0;
    regs_regs_4_lpi_2 = 150'b0;
    regs_regs_3_lpi_2 = 150'b0;
    regs_regs_1_lpi_2 = 150'b0;
    regs_regs_2_lpi_2 = 150'b0;
    regs_regs_0_lpi_2 = 150'b0;
    regs_regs_4_sva = 150'b0;
    regs_regs_0_sva = 150'b0;
    regs_regs_3_sva = 150'b0;
    regs_regs_1_sva = 150'b0;
    regs_regs_2_sva = 150'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [149:0] MUX_v_150_4_2;
    input [599:0] inputs;
    input [1:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[599:450];
      end
      2'b01 : begin
        result = inputs[449:300];
      end
      2'b10 : begin
        result = inputs[299:150];
      end
      2'b11 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[599:450];
      end
    endcase
    MUX_v_150_4_2 = result;
  end
  endfunction


  function [149:0] MUX_v_150_2_2;
    input [299:0] inputs;
    input [0:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[299:150];
      end
      1'b1 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[299:150];
      end
    endcase
    MUX_v_150_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [9:0] MUX_v_10_8_2;
    input [79:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[79:70];
      end
      3'b001 : begin
        result = inputs[69:60];
      end
      3'b010 : begin
        result = inputs[59:50];
      end
      3'b011 : begin
        result = inputs[49:40];
      end
      3'b100 : begin
        result = inputs[39:30];
      end
      3'b101 : begin
        result = inputs[29:20];
      end
      3'b110 : begin
        result = inputs[19:10];
      end
      3'b111 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[79:70];
      end
    endcase
    MUX_v_10_8_2 = result;
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [8:0] readslicef_10_9_1;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_10_9_1 = tmp[8:0];
  end
  endfunction


  function [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function [2:0] signext_3_2;
    input [1:0] vector;
  begin
    signext_3_2= {{1{vector[1]}}, vector};
  end
  endfunction


  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function [11:0] readslicef_13_12_1;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_13_12_1 = tmp[11:0];
  end
  endfunction


  function [15:0] readslicef_17_16_1;
    input [16:0] vector;
    reg [16:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_17_16_1 = tmp[15:0];
  end
  endfunction


  function [13:0] readslicef_15_14_1;
    input [14:0] vector;
    reg [14:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_15_14_1 = tmp[13:0];
  end
  endfunction


  function [12:0] readslicef_14_13_1;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_14_13_1 = tmp[12:0];
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_s2s_10_12 ;
    input signed [9:0]  vector ;
  begin
    conv_s2s_10_12 = {{2{vector[9]}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_8_10 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_10 = {{2{vector[7]}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function signed [4:0] conv_s2s_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_9_10 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_10 = {vector[8], vector};
  end
  endfunction


  function  [7:0] conv_s2u_16_8 ;
    input signed [15:0]  vector ;
  begin
    conv_s2u_16_8 = vector[7:0];
  end
  endfunction


  function signed [7:0] conv_u2s_3_8 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_8 = {{5{1'b0}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_8_10 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_10 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [7:0] conv_s2u_6_8 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_8 = {{2{vector[5]}}, vector};
  end
  endfunction


  function signed [5:0] conv_s2s_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function signed [4:0] conv_u2s_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_s2u_7_8 ;
    input signed [6:0]  vector ;
  begin
    conv_s2u_7_8 = {vector[6], vector};
  end
  endfunction


  function signed [6:0] conv_s2s_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2s_6_7 = {vector[5], vector};
  end
  endfunction


  function signed [5:0] conv_s2s_4_6 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [15:0] conv_u2u_32_16 ;
    input [31:0]  vector ;
  begin
    conv_u2u_32_16 = vector[15:0];
  end
  endfunction


  function signed [15:0] conv_s2s_12_16 ;
    input signed [11:0]  vector ;
  begin
    conv_s2s_12_16 = {{4{vector[11]}}, vector};
  end
  endfunction


  function signed [15:0] conv_s2s_6_16 ;
    input signed [5:0]  vector ;
  begin
    conv_s2s_6_16 = {{10{vector[5]}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [9:0] conv_s2u_20_10 ;
    input signed [19:0]  vector ;
  begin
    conv_s2u_20_10 = vector[9:0];
  end
  endfunction


  function signed [9:0] conv_u2s_3_10 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_10 = {{7{1'b0}}, vector};
  end
  endfunction


  function signed [11:0] conv_s2s_11_12 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_12 = {vector[10], vector};
  end
  endfunction


  function  [11:0] conv_s2u_24_12 ;
    input signed [23:0]  vector ;
  begin
    conv_s2u_24_12 = vector[11:0];
  end
  endfunction


  function signed [11:0] conv_u2s_3_12 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_12 = {{9{1'b0}}, vector};
  end
  endfunction


  function signed [12:0] conv_s2s_11_13 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function signed [16:0] conv_s2s_15_17 ;
    input signed [14:0]  vector ;
  begin
    conv_s2s_15_17 = {{2{vector[14]}}, vector};
  end
  endfunction


  function signed [14:0] conv_s2s_14_15 ;
    input signed [13:0]  vector ;
  begin
    conv_s2s_14_15 = {vector[13], vector};
  end
  endfunction


  function signed [13:0] conv_s2s_13_14 ;
    input signed [12:0]  vector ;
  begin
    conv_s2s_13_14 = {vector[12], vector};
  end
  endfunction


  function signed [14:0] conv_s2s_13_15 ;
    input signed [12:0]  vector ;
  begin
    conv_s2s_13_15 = {{2{vector[12]}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mean_vga
//  Generated from file(s):
//    7) $PROJECT_HOME/../../../../catapult_proj/vga_blur/blur.c
// ------------------------------------------------------------------


module mean_vga (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mean_vga_core mean_vga_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



